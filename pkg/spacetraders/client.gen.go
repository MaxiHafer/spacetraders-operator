// Package spacetraders provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package spacetraders

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	AgentTokenScopes = "AgentToken.Scopes"
)

// Defines values for ActivityLevel.
const (
	GROWING    ActivityLevel = "GROWING"
	RESTRICTED ActivityLevel = "RESTRICTED"
	STRONG     ActivityLevel = "STRONG"
	WEAK       ActivityLevel = "WEAK"
)

// Defines values for ContractType.
const (
	ContractTypePROCUREMENT ContractType = "PROCUREMENT"
	ContractTypeSHUTTLE     ContractType = "SHUTTLE"
	ContractTypeTRANSPORT   ContractType = "TRANSPORT"
)

// Defines values for FactionSymbol.
const (
	FactionSymbolAEGIS    FactionSymbol = "AEGIS"
	FactionSymbolANCIENTS FactionSymbol = "ANCIENTS"
	FactionSymbolASTRO    FactionSymbol = "ASTRO"
	FactionSymbolCOBALT   FactionSymbol = "COBALT"
	FactionSymbolCORSAIRS FactionSymbol = "CORSAIRS"
	FactionSymbolCOSMIC   FactionSymbol = "COSMIC"
	FactionSymbolCULT     FactionSymbol = "CULT"
	FactionSymbolDOMINION FactionSymbol = "DOMINION"
	FactionSymbolECHO     FactionSymbol = "ECHO"
	FactionSymbolETHEREAL FactionSymbol = "ETHEREAL"
	FactionSymbolGALACTIC FactionSymbol = "GALACTIC"
	FactionSymbolLORDS    FactionSymbol = "LORDS"
	FactionSymbolOBSIDIAN FactionSymbol = "OBSIDIAN"
	FactionSymbolOMEGA    FactionSymbol = "OMEGA"
	FactionSymbolQUANTUM  FactionSymbol = "QUANTUM"
	FactionSymbolSHADOW   FactionSymbol = "SHADOW"
	FactionSymbolSOLITARY FactionSymbol = "SOLITARY"
	FactionSymbolUNITED   FactionSymbol = "UNITED"
	FactionSymbolVOID     FactionSymbol = "VOID"
)

// Defines values for FactionTraitSymbol.
const (
	FactionTraitSymbolADAPTABLE               FactionTraitSymbol = "ADAPTABLE"
	FactionTraitSymbolAGGRESSIVE              FactionTraitSymbol = "AGGRESSIVE"
	FactionTraitSymbolBOLD                    FactionTraitSymbol = "BOLD"
	FactionTraitSymbolBRUTAL                  FactionTraitSymbol = "BRUTAL"
	FactionTraitSymbolBUREAUCRATIC            FactionTraitSymbol = "BUREAUCRATIC"
	FactionTraitSymbolCAPITALISTIC            FactionTraitSymbol = "CAPITALISTIC"
	FactionTraitSymbolCLAN                    FactionTraitSymbol = "CLAN"
	FactionTraitSymbolCOLLABORATIVE           FactionTraitSymbol = "COLLABORATIVE"
	FactionTraitSymbolCOMMERCIAL              FactionTraitSymbol = "COMMERCIAL"
	FactionTraitSymbolCOOPERATIVE             FactionTraitSymbol = "COOPERATIVE"
	FactionTraitSymbolCURIOUS                 FactionTraitSymbol = "CURIOUS"
	FactionTraitSymbolDARING                  FactionTraitSymbol = "DARING"
	FactionTraitSymbolDEFENSIVE               FactionTraitSymbol = "DEFENSIVE"
	FactionTraitSymbolDEXTEROUS               FactionTraitSymbol = "DEXTEROUS"
	FactionTraitSymbolDISTRUSTFUL             FactionTraitSymbol = "DISTRUSTFUL"
	FactionTraitSymbolDIVERSE                 FactionTraitSymbol = "DIVERSE"
	FactionTraitSymbolDOMINANT                FactionTraitSymbol = "DOMINANT"
	FactionTraitSymbolDOMINION                FactionTraitSymbol = "DOMINION"
	FactionTraitSymbolENTREPRENEURIAL         FactionTraitSymbol = "ENTREPRENEURIAL"
	FactionTraitSymbolESTABLISHED             FactionTraitSymbol = "ESTABLISHED"
	FactionTraitSymbolEXILES                  FactionTraitSymbol = "EXILES"
	FactionTraitSymbolEXPLORATORY             FactionTraitSymbol = "EXPLORATORY"
	FactionTraitSymbolFLEETING                FactionTraitSymbol = "FLEETING"
	FactionTraitSymbolFLEXIBLE                FactionTraitSymbol = "FLEXIBLE"
	FactionTraitSymbolFORSAKEN                FactionTraitSymbol = "FORSAKEN"
	FactionTraitSymbolFRAGMENTED              FactionTraitSymbol = "FRAGMENTED"
	FactionTraitSymbolFREEMARKETS             FactionTraitSymbol = "FREE_MARKETS"
	FactionTraitSymbolFRINGE                  FactionTraitSymbol = "FRINGE"
	FactionTraitSymbolGUILD                   FactionTraitSymbol = "GUILD"
	FactionTraitSymbolIMPERIALISTIC           FactionTraitSymbol = "IMPERIALISTIC"
	FactionTraitSymbolINDEPENDENT             FactionTraitSymbol = "INDEPENDENT"
	FactionTraitSymbolINDUSTRIOUS             FactionTraitSymbol = "INDUSTRIOUS"
	FactionTraitSymbolINESCAPABLE             FactionTraitSymbol = "INESCAPABLE"
	FactionTraitSymbolINNOVATIVE              FactionTraitSymbol = "INNOVATIVE"
	FactionTraitSymbolINTELLIGENT             FactionTraitSymbol = "INTELLIGENT"
	FactionTraitSymbolISOLATED                FactionTraitSymbol = "ISOLATED"
	FactionTraitSymbolLOCALIZED               FactionTraitSymbol = "LOCALIZED"
	FactionTraitSymbolMILITARISTIC            FactionTraitSymbol = "MILITARISTIC"
	FactionTraitSymbolNOTABLE                 FactionTraitSymbol = "NOTABLE"
	FactionTraitSymbolPEACEFUL                FactionTraitSymbol = "PEACEFUL"
	FactionTraitSymbolPIRATES                 FactionTraitSymbol = "PIRATES"
	FactionTraitSymbolPROGRESSIVE             FactionTraitSymbol = "PROGRESSIVE"
	FactionTraitSymbolPROUD                   FactionTraitSymbol = "PROUD"
	FactionTraitSymbolRAIDERS                 FactionTraitSymbol = "RAIDERS"
	FactionTraitSymbolREBELLIOUS              FactionTraitSymbol = "REBELLIOUS"
	FactionTraitSymbolRESEARCHFOCUSED         FactionTraitSymbol = "RESEARCH_FOCUSED"
	FactionTraitSymbolRESOURCEFUL             FactionTraitSymbol = "RESOURCEFUL"
	FactionTraitSymbolSCAVENGERS              FactionTraitSymbol = "SCAVENGERS"
	FactionTraitSymbolSECRETIVE               FactionTraitSymbol = "SECRETIVE"
	FactionTraitSymbolSELFINTERESTED          FactionTraitSymbol = "SELF_INTERESTED"
	FactionTraitSymbolSELFSUFFICIENT          FactionTraitSymbol = "SELF_SUFFICIENT"
	FactionTraitSymbolSMUGGLERS               FactionTraitSymbol = "SMUGGLERS"
	FactionTraitSymbolSTRATEGIC               FactionTraitSymbol = "STRATEGIC"
	FactionTraitSymbolTECHNOLOGICALLYADVANCED FactionTraitSymbol = "TECHNOLOGICALLY_ADVANCED"
	FactionTraitSymbolTREASUREHUNTERS         FactionTraitSymbol = "TREASURE_HUNTERS"
	FactionTraitSymbolUNITED                  FactionTraitSymbol = "UNITED"
	FactionTraitSymbolUNPREDICTABLE           FactionTraitSymbol = "UNPREDICTABLE"
	FactionTraitSymbolVISIONARY               FactionTraitSymbol = "VISIONARY"
	FactionTraitSymbolWELCOMING               FactionTraitSymbol = "WELCOMING"
)

// Defines values for MarketTradeGoodType.
const (
	EXCHANGE MarketTradeGoodType = "EXCHANGE"
	EXPORT   MarketTradeGoodType = "EXPORT"
	IMPORT   MarketTradeGoodType = "IMPORT"
)

// Defines values for MarketTransactionType.
const (
	PURCHASE MarketTransactionType = "PURCHASE"
	SELL     MarketTransactionType = "SELL"
)

// Defines values for ShipCrewRotation.
const (
	RELAXED ShipCrewRotation = "RELAXED"
	STRICT  ShipCrewRotation = "STRICT"
)

// Defines values for ShipEngineSymbol.
const (
	ShipEngineSymbolENGINEHYPERDRIVEI   ShipEngineSymbol = "ENGINE_HYPER_DRIVE_I"
	ShipEngineSymbolENGINEIMPULSEDRIVEI ShipEngineSymbol = "ENGINE_IMPULSE_DRIVE_I"
	ShipEngineSymbolENGINEIONDRIVEI     ShipEngineSymbol = "ENGINE_ION_DRIVE_I"
	ShipEngineSymbolENGINEIONDRIVEII    ShipEngineSymbol = "ENGINE_ION_DRIVE_II"
)

// Defines values for ShipFrameSymbol.
const (
	FRAMECARRIER        ShipFrameSymbol = "FRAME_CARRIER"
	FRAMECRUISER        ShipFrameSymbol = "FRAME_CRUISER"
	FRAMEDESTROYER      ShipFrameSymbol = "FRAME_DESTROYER"
	FRAMEDRONE          ShipFrameSymbol = "FRAME_DRONE"
	FRAMEEXPLORER       ShipFrameSymbol = "FRAME_EXPLORER"
	FRAMEFIGHTER        ShipFrameSymbol = "FRAME_FIGHTER"
	FRAMEFRIGATE        ShipFrameSymbol = "FRAME_FRIGATE"
	FRAMEHEAVYFREIGHTER ShipFrameSymbol = "FRAME_HEAVY_FREIGHTER"
	FRAMEINTERCEPTOR    ShipFrameSymbol = "FRAME_INTERCEPTOR"
	FRAMELIGHTFREIGHTER ShipFrameSymbol = "FRAME_LIGHT_FREIGHTER"
	FRAMEMINER          ShipFrameSymbol = "FRAME_MINER"
	FRAMEPROBE          ShipFrameSymbol = "FRAME_PROBE"
	FRAMERACER          ShipFrameSymbol = "FRAME_RACER"
	FRAMESHUTTLE        ShipFrameSymbol = "FRAME_SHUTTLE"
	FRAMETRANSPORT      ShipFrameSymbol = "FRAME_TRANSPORT"
)

// Defines values for ShipModuleSymbol.
const (
	MODULECARGOHOLDI        ShipModuleSymbol = "MODULE_CARGO_HOLD_I"
	MODULECARGOHOLDII       ShipModuleSymbol = "MODULE_CARGO_HOLD_II"
	MODULECARGOHOLDIII      ShipModuleSymbol = "MODULE_CARGO_HOLD_III"
	MODULECREWQUARTERSI     ShipModuleSymbol = "MODULE_CREW_QUARTERS_I"
	MODULEENVOYQUARTERSI    ShipModuleSymbol = "MODULE_ENVOY_QUARTERS_I"
	MODULEFUELREFINERYI     ShipModuleSymbol = "MODULE_FUEL_REFINERY_I"
	MODULEGASPROCESSORI     ShipModuleSymbol = "MODULE_GAS_PROCESSOR_I"
	MODULEJUMPDRIVEI        ShipModuleSymbol = "MODULE_JUMP_DRIVE_I"
	MODULEJUMPDRIVEII       ShipModuleSymbol = "MODULE_JUMP_DRIVE_II"
	MODULEJUMPDRIVEIII      ShipModuleSymbol = "MODULE_JUMP_DRIVE_III"
	MODULEMICROREFINERYI    ShipModuleSymbol = "MODULE_MICRO_REFINERY_I"
	MODULEMINERALPROCESSORI ShipModuleSymbol = "MODULE_MINERAL_PROCESSOR_I"
	MODULEOREREFINERYI      ShipModuleSymbol = "MODULE_ORE_REFINERY_I"
	MODULEPASSENGERCABINI   ShipModuleSymbol = "MODULE_PASSENGER_CABIN_I"
	MODULESCIENCELABI       ShipModuleSymbol = "MODULE_SCIENCE_LAB_I"
	MODULESHIELDGENERATORI  ShipModuleSymbol = "MODULE_SHIELD_GENERATOR_I"
	MODULESHIELDGENERATORII ShipModuleSymbol = "MODULE_SHIELD_GENERATOR_II"
	MODULEWARPDRIVEI        ShipModuleSymbol = "MODULE_WARP_DRIVE_I"
	MODULEWARPDRIVEII       ShipModuleSymbol = "MODULE_WARP_DRIVE_II"
	MODULEWARPDRIVEIII      ShipModuleSymbol = "MODULE_WARP_DRIVE_III"
)

// Defines values for ShipMountDeposits.
const (
	ALUMINUMORE     ShipMountDeposits = "ALUMINUM_ORE"
	AMMONIAICE      ShipMountDeposits = "AMMONIA_ICE"
	COPPERORE       ShipMountDeposits = "COPPER_ORE"
	DIAMONDS        ShipMountDeposits = "DIAMONDS"
	GOLDORE         ShipMountDeposits = "GOLD_ORE"
	ICEWATER        ShipMountDeposits = "ICE_WATER"
	IRONORE         ShipMountDeposits = "IRON_ORE"
	MERITIUMORE     ShipMountDeposits = "MERITIUM_ORE"
	PLATINUMORE     ShipMountDeposits = "PLATINUM_ORE"
	PRECIOUSSTONES  ShipMountDeposits = "PRECIOUS_STONES"
	QUARTZSAND      ShipMountDeposits = "QUARTZ_SAND"
	SILICONCRYSTALS ShipMountDeposits = "SILICON_CRYSTALS"
	SILVERORE       ShipMountDeposits = "SILVER_ORE"
	URANITEORE      ShipMountDeposits = "URANITE_ORE"
)

// Defines values for ShipMountSymbol.
const (
	MOUNTGASSIPHONI       ShipMountSymbol = "MOUNT_GAS_SIPHON_I"
	MOUNTGASSIPHONII      ShipMountSymbol = "MOUNT_GAS_SIPHON_II"
	MOUNTGASSIPHONIII     ShipMountSymbol = "MOUNT_GAS_SIPHON_III"
	MOUNTLASERCANNONI     ShipMountSymbol = "MOUNT_LASER_CANNON_I"
	MOUNTMININGLASERI     ShipMountSymbol = "MOUNT_MINING_LASER_I"
	MOUNTMININGLASERII    ShipMountSymbol = "MOUNT_MINING_LASER_II"
	MOUNTMININGLASERIII   ShipMountSymbol = "MOUNT_MINING_LASER_III"
	MOUNTMISSILELAUNCHERI ShipMountSymbol = "MOUNT_MISSILE_LAUNCHER_I"
	MOUNTSENSORARRAYI     ShipMountSymbol = "MOUNT_SENSOR_ARRAY_I"
	MOUNTSENSORARRAYII    ShipMountSymbol = "MOUNT_SENSOR_ARRAY_II"
	MOUNTSENSORARRAYIII   ShipMountSymbol = "MOUNT_SENSOR_ARRAY_III"
	MOUNTSURVEYORI        ShipMountSymbol = "MOUNT_SURVEYOR_I"
	MOUNTSURVEYORII       ShipMountSymbol = "MOUNT_SURVEYOR_II"
	MOUNTSURVEYORIII      ShipMountSymbol = "MOUNT_SURVEYOR_III"
	MOUNTTURRETI          ShipMountSymbol = "MOUNT_TURRET_I"
)

// Defines values for ShipNavFlightMode.
const (
	BURN    ShipNavFlightMode = "BURN"
	CRUISE  ShipNavFlightMode = "CRUISE"
	DRIFT   ShipNavFlightMode = "DRIFT"
	STEALTH ShipNavFlightMode = "STEALTH"
)

// Defines values for ShipNavStatus.
const (
	DOCKED    ShipNavStatus = "DOCKED"
	INORBIT   ShipNavStatus = "IN_ORBIT"
	INTRANSIT ShipNavStatus = "IN_TRANSIT"
)

// Defines values for ShipReactorSymbol.
const (
	REACTORANTIMATTERI ShipReactorSymbol = "REACTOR_ANTIMATTER_I"
	REACTORCHEMICALI   ShipReactorSymbol = "REACTOR_CHEMICAL_I"
	REACTORFISSIONI    ShipReactorSymbol = "REACTOR_FISSION_I"
	REACTORFUSIONI     ShipReactorSymbol = "REACTOR_FUSION_I"
	REACTORSOLARI      ShipReactorSymbol = "REACTOR_SOLAR_I"
)

// Defines values for ShipRole.
const (
	ShipRoleCARRIER     ShipRole = "CARRIER"
	ShipRoleCOMMAND     ShipRole = "COMMAND"
	ShipRoleEXCAVATOR   ShipRole = "EXCAVATOR"
	ShipRoleEXPLORER    ShipRole = "EXPLORER"
	ShipRoleFABRICATOR  ShipRole = "FABRICATOR"
	ShipRoleHARVESTER   ShipRole = "HARVESTER"
	ShipRoleHAULER      ShipRole = "HAULER"
	ShipRoleINTERCEPTOR ShipRole = "INTERCEPTOR"
	ShipRolePATROL      ShipRole = "PATROL"
	ShipRoleREFINERY    ShipRole = "REFINERY"
	ShipRoleREPAIR      ShipRole = "REPAIR"
	ShipRoleSATELLITE   ShipRole = "SATELLITE"
	ShipRoleSURVEYOR    ShipRole = "SURVEYOR"
	ShipRoleTRANSPORT   ShipRole = "TRANSPORT"
)

// Defines values for ShipType.
const (
	SHIPCOMMANDFRIGATE    ShipType = "SHIP_COMMAND_FRIGATE"
	SHIPEXPLORER          ShipType = "SHIP_EXPLORER"
	SHIPHEAVYFREIGHTER    ShipType = "SHIP_HEAVY_FREIGHTER"
	SHIPINTERCEPTOR       ShipType = "SHIP_INTERCEPTOR"
	SHIPLIGHTHAULER       ShipType = "SHIP_LIGHT_HAULER"
	SHIPLIGHTSHUTTLE      ShipType = "SHIP_LIGHT_SHUTTLE"
	SHIPMININGDRONE       ShipType = "SHIP_MINING_DRONE"
	SHIPOREHOUND          ShipType = "SHIP_ORE_HOUND"
	SHIPPROBE             ShipType = "SHIP_PROBE"
	SHIPREFININGFREIGHTER ShipType = "SHIP_REFINING_FREIGHTER"
	SHIPSIPHONDRONE       ShipType = "SHIP_SIPHON_DRONE"
	SHIPSURVEYOR          ShipType = "SHIP_SURVEYOR"
)

// Defines values for SupplyLevel.
const (
	SupplyLevelABUNDANT SupplyLevel = "ABUNDANT"
	SupplyLevelHIGH     SupplyLevel = "HIGH"
	SupplyLevelLIMITED  SupplyLevel = "LIMITED"
	SupplyLevelMODERATE SupplyLevel = "MODERATE"
	SupplyLevelSCARCE   SupplyLevel = "SCARCE"
)

// Defines values for SurveySize.
const (
	SurveySizeLARGE    SurveySize = "LARGE"
	SurveySizeMODERATE SurveySize = "MODERATE"
	SurveySizeSMALL    SurveySize = "SMALL"
)

// Defines values for SystemType.
const (
	SystemTypeBLACKHOLE   SystemType = "BLACK_HOLE"
	SystemTypeBLUESTAR    SystemType = "BLUE_STAR"
	SystemTypeHYPERGIANT  SystemType = "HYPERGIANT"
	SystemTypeNEBULA      SystemType = "NEBULA"
	SystemTypeNEUTRONSTAR SystemType = "NEUTRON_STAR"
	SystemTypeORANGESTAR  SystemType = "ORANGE_STAR"
	SystemTypeREDSTAR     SystemType = "RED_STAR"
	SystemTypeUNSTABLE    SystemType = "UNSTABLE"
	SystemTypeWHITEDWARF  SystemType = "WHITE_DWARF"
	SystemTypeYOUNGSTAR   SystemType = "YOUNG_STAR"
)

// Defines values for TradeSymbol.
const (
	TradeSymbolADVANCEDCIRCUITRY       TradeSymbol = "ADVANCED_CIRCUITRY"
	TradeSymbolAIMAINFRAMES            TradeSymbol = "AI_MAINFRAMES"
	TradeSymbolALUMINUM                TradeSymbol = "ALUMINUM"
	TradeSymbolALUMINUMORE             TradeSymbol = "ALUMINUM_ORE"
	TradeSymbolAMMONIAICE              TradeSymbol = "AMMONIA_ICE"
	TradeSymbolAMMUNITION              TradeSymbol = "AMMUNITION"
	TradeSymbolANTIMATTER              TradeSymbol = "ANTIMATTER"
	TradeSymbolASSAULTRIFLES           TradeSymbol = "ASSAULT_RIFLES"
	TradeSymbolBIOCOMPOSITES           TradeSymbol = "BIOCOMPOSITES"
	TradeSymbolBOTANICALSPECIMENS      TradeSymbol = "BOTANICAL_SPECIMENS"
	TradeSymbolCLOTHING                TradeSymbol = "CLOTHING"
	TradeSymbolCOPPER                  TradeSymbol = "COPPER"
	TradeSymbolCOPPERORE               TradeSymbol = "COPPER_ORE"
	TradeSymbolCULTURALARTIFACTS       TradeSymbol = "CULTURAL_ARTIFACTS"
	TradeSymbolCYBERIMPLANTS           TradeSymbol = "CYBER_IMPLANTS"
	TradeSymbolDIAMONDS                TradeSymbol = "DIAMONDS"
	TradeSymbolDRUGS                   TradeSymbol = "DRUGS"
	TradeSymbolELECTRONICS             TradeSymbol = "ELECTRONICS"
	TradeSymbolENGINEHYPERDRIVEI       TradeSymbol = "ENGINE_HYPER_DRIVE_I"
	TradeSymbolENGINEIMPULSEDRIVEI     TradeSymbol = "ENGINE_IMPULSE_DRIVE_I"
	TradeSymbolENGINEIONDRIVEI         TradeSymbol = "ENGINE_ION_DRIVE_I"
	TradeSymbolENGINEIONDRIVEII        TradeSymbol = "ENGINE_ION_DRIVE_II"
	TradeSymbolEQUIPMENT               TradeSymbol = "EQUIPMENT"
	TradeSymbolEXOTICMATTER            TradeSymbol = "EXOTIC_MATTER"
	TradeSymbolEXPLOSIVES              TradeSymbol = "EXPLOSIVES"
	TradeSymbolFABMATS                 TradeSymbol = "FAB_MATS"
	TradeSymbolFABRICS                 TradeSymbol = "FABRICS"
	TradeSymbolFERTILIZERS             TradeSymbol = "FERTILIZERS"
	TradeSymbolFIREARMS                TradeSymbol = "FIREARMS"
	TradeSymbolFOOD                    TradeSymbol = "FOOD"
	TradeSymbolFRAMECARRIER            TradeSymbol = "FRAME_CARRIER"
	TradeSymbolFRAMECRUISER            TradeSymbol = "FRAME_CRUISER"
	TradeSymbolFRAMEDESTROYER          TradeSymbol = "FRAME_DESTROYER"
	TradeSymbolFRAMEDRONE              TradeSymbol = "FRAME_DRONE"
	TradeSymbolFRAMEEXPLORER           TradeSymbol = "FRAME_EXPLORER"
	TradeSymbolFRAMEFIGHTER            TradeSymbol = "FRAME_FIGHTER"
	TradeSymbolFRAMEFRIGATE            TradeSymbol = "FRAME_FRIGATE"
	TradeSymbolFRAMEHEAVYFREIGHTER     TradeSymbol = "FRAME_HEAVY_FREIGHTER"
	TradeSymbolFRAMEINTERCEPTOR        TradeSymbol = "FRAME_INTERCEPTOR"
	TradeSymbolFRAMELIGHTFREIGHTER     TradeSymbol = "FRAME_LIGHT_FREIGHTER"
	TradeSymbolFRAMEMINER              TradeSymbol = "FRAME_MINER"
	TradeSymbolFRAMEPROBE              TradeSymbol = "FRAME_PROBE"
	TradeSymbolFRAMERACER              TradeSymbol = "FRAME_RACER"
	TradeSymbolFRAMESHUTTLE            TradeSymbol = "FRAME_SHUTTLE"
	TradeSymbolFRAMETRANSPORT          TradeSymbol = "FRAME_TRANSPORT"
	TradeSymbolFUEL                    TradeSymbol = "FUEL"
	TradeSymbolGENETHERAPEUTICS        TradeSymbol = "GENE_THERAPEUTICS"
	TradeSymbolGOLD                    TradeSymbol = "GOLD"
	TradeSymbolGOLDORE                 TradeSymbol = "GOLD_ORE"
	TradeSymbolGRAVITONEMITTERS        TradeSymbol = "GRAVITON_EMITTERS"
	TradeSymbolHOLOGRAPHICS            TradeSymbol = "HOLOGRAPHICS"
	TradeSymbolHYDROCARBON             TradeSymbol = "HYDROCARBON"
	TradeSymbolICEWATER                TradeSymbol = "ICE_WATER"
	TradeSymbolIRON                    TradeSymbol = "IRON"
	TradeSymbolIRONORE                 TradeSymbol = "IRON_ORE"
	TradeSymbolJEWELRY                 TradeSymbol = "JEWELRY"
	TradeSymbolLABINSTRUMENTS          TradeSymbol = "LAB_INSTRUMENTS"
	TradeSymbolLASERRIFLES             TradeSymbol = "LASER_RIFLES"
	TradeSymbolLIQUIDHYDROGEN          TradeSymbol = "LIQUID_HYDROGEN"
	TradeSymbolLIQUIDNITROGEN          TradeSymbol = "LIQUID_NITROGEN"
	TradeSymbolMACHINERY               TradeSymbol = "MACHINERY"
	TradeSymbolMEDICINE                TradeSymbol = "MEDICINE"
	TradeSymbolMERITIUM                TradeSymbol = "MERITIUM"
	TradeSymbolMERITIUMORE             TradeSymbol = "MERITIUM_ORE"
	TradeSymbolMICROFUSIONGENERATORS   TradeSymbol = "MICRO_FUSION_GENERATORS"
	TradeSymbolMICROPROCESSORS         TradeSymbol = "MICROPROCESSORS"
	TradeSymbolMILITARYEQUIPMENT       TradeSymbol = "MILITARY_EQUIPMENT"
	TradeSymbolMODULECARGOHOLDI        TradeSymbol = "MODULE_CARGO_HOLD_I"
	TradeSymbolMODULECARGOHOLDII       TradeSymbol = "MODULE_CARGO_HOLD_II"
	TradeSymbolMODULECARGOHOLDIII      TradeSymbol = "MODULE_CARGO_HOLD_III"
	TradeSymbolMODULECREWQUARTERSI     TradeSymbol = "MODULE_CREW_QUARTERS_I"
	TradeSymbolMODULEENVOYQUARTERSI    TradeSymbol = "MODULE_ENVOY_QUARTERS_I"
	TradeSymbolMODULEFUELREFINERYI     TradeSymbol = "MODULE_FUEL_REFINERY_I"
	TradeSymbolMODULEGASPROCESSORI     TradeSymbol = "MODULE_GAS_PROCESSOR_I"
	TradeSymbolMODULEJUMPDRIVEI        TradeSymbol = "MODULE_JUMP_DRIVE_I"
	TradeSymbolMODULEJUMPDRIVEII       TradeSymbol = "MODULE_JUMP_DRIVE_II"
	TradeSymbolMODULEJUMPDRIVEIII      TradeSymbol = "MODULE_JUMP_DRIVE_III"
	TradeSymbolMODULEMICROREFINERYI    TradeSymbol = "MODULE_MICRO_REFINERY_I"
	TradeSymbolMODULEMINERALPROCESSORI TradeSymbol = "MODULE_MINERAL_PROCESSOR_I"
	TradeSymbolMODULEOREREFINERYI      TradeSymbol = "MODULE_ORE_REFINERY_I"
	TradeSymbolMODULEPASSENGERCABINI   TradeSymbol = "MODULE_PASSENGER_CABIN_I"
	TradeSymbolMODULESCIENCELABI       TradeSymbol = "MODULE_SCIENCE_LAB_I"
	TradeSymbolMODULESHIELDGENERATORI  TradeSymbol = "MODULE_SHIELD_GENERATOR_I"
	TradeSymbolMODULESHIELDGENERATORII TradeSymbol = "MODULE_SHIELD_GENERATOR_II"
	TradeSymbolMODULEWARPDRIVEI        TradeSymbol = "MODULE_WARP_DRIVE_I"
	TradeSymbolMODULEWARPDRIVEII       TradeSymbol = "MODULE_WARP_DRIVE_II"
	TradeSymbolMODULEWARPDRIVEIII      TradeSymbol = "MODULE_WARP_DRIVE_III"
	TradeSymbolMOODREGULATORS          TradeSymbol = "MOOD_REGULATORS"
	TradeSymbolMOUNTGASSIPHONI         TradeSymbol = "MOUNT_GAS_SIPHON_I"
	TradeSymbolMOUNTGASSIPHONII        TradeSymbol = "MOUNT_GAS_SIPHON_II"
	TradeSymbolMOUNTGASSIPHONIII       TradeSymbol = "MOUNT_GAS_SIPHON_III"
	TradeSymbolMOUNTLASERCANNONI       TradeSymbol = "MOUNT_LASER_CANNON_I"
	TradeSymbolMOUNTMININGLASERI       TradeSymbol = "MOUNT_MINING_LASER_I"
	TradeSymbolMOUNTMININGLASERII      TradeSymbol = "MOUNT_MINING_LASER_II"
	TradeSymbolMOUNTMININGLASERIII     TradeSymbol = "MOUNT_MINING_LASER_III"
	TradeSymbolMOUNTMISSILELAUNCHERI   TradeSymbol = "MOUNT_MISSILE_LAUNCHER_I"
	TradeSymbolMOUNTSENSORARRAYI       TradeSymbol = "MOUNT_SENSOR_ARRAY_I"
	TradeSymbolMOUNTSENSORARRAYII      TradeSymbol = "MOUNT_SENSOR_ARRAY_II"
	TradeSymbolMOUNTSENSORARRAYIII     TradeSymbol = "MOUNT_SENSOR_ARRAY_III"
	TradeSymbolMOUNTSURVEYORI          TradeSymbol = "MOUNT_SURVEYOR_I"
	TradeSymbolMOUNTSURVEYORII         TradeSymbol = "MOUNT_SURVEYOR_II"
	TradeSymbolMOUNTSURVEYORIII        TradeSymbol = "MOUNT_SURVEYOR_III"
	TradeSymbolMOUNTTURRETI            TradeSymbol = "MOUNT_TURRET_I"
	TradeSymbolNANOBOTS                TradeSymbol = "NANOBOTS"
	TradeSymbolNEURALCHIPS             TradeSymbol = "NEURAL_CHIPS"
	TradeSymbolNOVELLIFEFORMS          TradeSymbol = "NOVEL_LIFEFORMS"
	TradeSymbolPLASTICS                TradeSymbol = "PLASTICS"
	TradeSymbolPLATINUM                TradeSymbol = "PLATINUM"
	TradeSymbolPLATINUMORE             TradeSymbol = "PLATINUM_ORE"
	TradeSymbolPOLYNUCLEOTIDES         TradeSymbol = "POLYNUCLEOTIDES"
	TradeSymbolPRECIOUSSTONES          TradeSymbol = "PRECIOUS_STONES"
	TradeSymbolQUANTUMDRIVES           TradeSymbol = "QUANTUM_DRIVES"
	TradeSymbolQUANTUMSTABILIZERS      TradeSymbol = "QUANTUM_STABILIZERS"
	TradeSymbolQUARTZSAND              TradeSymbol = "QUARTZ_SAND"
	TradeSymbolREACTORANTIMATTERI      TradeSymbol = "REACTOR_ANTIMATTER_I"
	TradeSymbolREACTORCHEMICALI        TradeSymbol = "REACTOR_CHEMICAL_I"
	TradeSymbolREACTORFISSIONI         TradeSymbol = "REACTOR_FISSION_I"
	TradeSymbolREACTORFUSIONI          TradeSymbol = "REACTOR_FUSION_I"
	TradeSymbolREACTORSOLARI           TradeSymbol = "REACTOR_SOLAR_I"
	TradeSymbolRELICTECH               TradeSymbol = "RELIC_TECH"
	TradeSymbolROBOTICDRONES           TradeSymbol = "ROBOTIC_DRONES"
	TradeSymbolSHIPCOMMANDFRIGATE      TradeSymbol = "SHIP_COMMAND_FRIGATE"
	TradeSymbolSHIPEXPLORER            TradeSymbol = "SHIP_EXPLORER"
	TradeSymbolSHIPHEAVYFREIGHTER      TradeSymbol = "SHIP_HEAVY_FREIGHTER"
	TradeSymbolSHIPINTERCEPTOR         TradeSymbol = "SHIP_INTERCEPTOR"
	TradeSymbolSHIPLIGHTHAULER         TradeSymbol = "SHIP_LIGHT_HAULER"
	TradeSymbolSHIPLIGHTSHUTTLE        TradeSymbol = "SHIP_LIGHT_SHUTTLE"
	TradeSymbolSHIPMININGDRONE         TradeSymbol = "SHIP_MINING_DRONE"
	TradeSymbolSHIPOREHOUND            TradeSymbol = "SHIP_ORE_HOUND"
	TradeSymbolSHIPPARTS               TradeSymbol = "SHIP_PARTS"
	TradeSymbolSHIPPLATING             TradeSymbol = "SHIP_PLATING"
	TradeSymbolSHIPPROBE               TradeSymbol = "SHIP_PROBE"
	TradeSymbolSHIPREFININGFREIGHTER   TradeSymbol = "SHIP_REFINING_FREIGHTER"
	TradeSymbolSHIPSALVAGE             TradeSymbol = "SHIP_SALVAGE"
	TradeSymbolSHIPSIPHONDRONE         TradeSymbol = "SHIP_SIPHON_DRONE"
	TradeSymbolSHIPSURVEYOR            TradeSymbol = "SHIP_SURVEYOR"
	TradeSymbolSILICONCRYSTALS         TradeSymbol = "SILICON_CRYSTALS"
	TradeSymbolSILVER                  TradeSymbol = "SILVER"
	TradeSymbolSILVERORE               TradeSymbol = "SILVER_ORE"
	TradeSymbolSUPERGRAINS             TradeSymbol = "SUPERGRAINS"
	TradeSymbolURANITE                 TradeSymbol = "URANITE"
	TradeSymbolURANITEORE              TradeSymbol = "URANITE_ORE"
	TradeSymbolVIRALAGENTS             TradeSymbol = "VIRAL_AGENTS"
)

// Defines values for WaypointModifierSymbol.
const (
	WaypointModifierSymbolCIVILUNREST   WaypointModifierSymbol = "CIVIL_UNREST"
	WaypointModifierSymbolCRITICALLIMIT WaypointModifierSymbol = "CRITICAL_LIMIT"
	WaypointModifierSymbolRADIATIONLEAK WaypointModifierSymbol = "RADIATION_LEAK"
	WaypointModifierSymbolSTRIPPED      WaypointModifierSymbol = "STRIPPED"
	WaypointModifierSymbolUNSTABLE      WaypointModifierSymbol = "UNSTABLE"
)

// Defines values for WaypointTraitSymbol.
const (
	ASHCLOUDS             WaypointTraitSymbol = "ASH_CLOUDS"
	BARREN                WaypointTraitSymbol = "BARREN"
	BLACKMARKET           WaypointTraitSymbol = "BLACK_MARKET"
	BREATHABLEATMOSPHERE  WaypointTraitSymbol = "BREATHABLE_ATMOSPHERE"
	BUREAUCRATIC          WaypointTraitSymbol = "BUREAUCRATIC"
	CANYONS               WaypointTraitSymbol = "CANYONS"
	COMMONMETALDEPOSITS   WaypointTraitSymbol = "COMMON_METAL_DEPOSITS"
	CORROSIVEATMOSPHERE   WaypointTraitSymbol = "CORROSIVE_ATMOSPHERE"
	CORRUPT               WaypointTraitSymbol = "CORRUPT"
	CRUSHINGGRAVITY       WaypointTraitSymbol = "CRUSHING_GRAVITY"
	DEBRISCLUSTER         WaypointTraitSymbol = "DEBRIS_CLUSTER"
	DEEPCRATERS           WaypointTraitSymbol = "DEEP_CRATERS"
	DIVERSELIFE           WaypointTraitSymbol = "DIVERSE_LIFE"
	DRYSEABEDS            WaypointTraitSymbol = "DRY_SEABEDS"
	EXPLORATIONOUTPOST    WaypointTraitSymbol = "EXPLORATION_OUTPOST"
	EXPLOSIVEGASES        WaypointTraitSymbol = "EXPLOSIVE_GASES"
	EXTREMEPRESSURE       WaypointTraitSymbol = "EXTREME_PRESSURE"
	EXTREMETEMPERATURES   WaypointTraitSymbol = "EXTREME_TEMPERATURES"
	FOSSILS               WaypointTraitSymbol = "FOSSILS"
	FROZEN                WaypointTraitSymbol = "FROZEN"
	HIGHTECH              WaypointTraitSymbol = "HIGH_TECH"
	HOLLOWEDINTERIOR      WaypointTraitSymbol = "HOLLOWED_INTERIOR"
	ICECRYSTALS           WaypointTraitSymbol = "ICE_CRYSTALS"
	INDUSTRIAL            WaypointTraitSymbol = "INDUSTRIAL"
	JOVIAN                WaypointTraitSymbol = "JOVIAN"
	JUNGLE                WaypointTraitSymbol = "JUNGLE"
	MAGMASEAS             WaypointTraitSymbol = "MAGMA_SEAS"
	MARKETPLACE           WaypointTraitSymbol = "MARKETPLACE"
	MEGASTRUCTURES        WaypointTraitSymbol = "MEGA_STRUCTURES"
	METHANEPOOLS          WaypointTraitSymbol = "METHANE_POOLS"
	MICROGRAVITYANOMALIES WaypointTraitSymbol = "MICRO_GRAVITY_ANOMALIES"
	MILITARYBASE          WaypointTraitSymbol = "MILITARY_BASE"
	MINERALDEPOSITS       WaypointTraitSymbol = "MINERAL_DEPOSITS"
	MUTATEDFLORA          WaypointTraitSymbol = "MUTATED_FLORA"
	OCEAN                 WaypointTraitSymbol = "OCEAN"
	OUTPOST               WaypointTraitSymbol = "OUTPOST"
	OVERCROWDED           WaypointTraitSymbol = "OVERCROWDED"
	PERPETUALDAYLIGHT     WaypointTraitSymbol = "PERPETUAL_DAYLIGHT"
	PERPETUALOVERCAST     WaypointTraitSymbol = "PERPETUAL_OVERCAST"
	PIRATEBASE            WaypointTraitSymbol = "PIRATE_BASE"
	PRECIOUSMETALDEPOSITS WaypointTraitSymbol = "PRECIOUS_METAL_DEPOSITS"
	RADIOACTIVE           WaypointTraitSymbol = "RADIOACTIVE"
	RAREMETALDEPOSITS     WaypointTraitSymbol = "RARE_METAL_DEPOSITS"
	RESEARCHFACILITY      WaypointTraitSymbol = "RESEARCH_FACILITY"
	ROCKY                 WaypointTraitSymbol = "ROCKY"
	SALTFLATS             WaypointTraitSymbol = "SALT_FLATS"
	SCARCELIFE            WaypointTraitSymbol = "SCARCE_LIFE"
	SCATTEREDSETTLEMENTS  WaypointTraitSymbol = "SCATTERED_SETTLEMENTS"
	SHALLOWCRATERS        WaypointTraitSymbol = "SHALLOW_CRATERS"
	SHIPYARD              WaypointTraitSymbol = "SHIPYARD"
	SPRAWLINGCITIES       WaypointTraitSymbol = "SPRAWLING_CITIES"
	STRIPPED              WaypointTraitSymbol = "STRIPPED"
	STRONGGRAVITY         WaypointTraitSymbol = "STRONG_GRAVITY"
	STRONGMAGNETOSPHERE   WaypointTraitSymbol = "STRONG_MAGNETOSPHERE"
	SUPERVOLCANOES        WaypointTraitSymbol = "SUPERVOLCANOES"
	SURVEILLANCEOUTPOST   WaypointTraitSymbol = "SURVEILLANCE_OUTPOST"
	SWAMP                 WaypointTraitSymbol = "SWAMP"
	TEMPERATE             WaypointTraitSymbol = "TEMPERATE"
	TERRAFORMED           WaypointTraitSymbol = "TERRAFORMED"
	THINATMOSPHERE        WaypointTraitSymbol = "THIN_ATMOSPHERE"
	TOXICATMOSPHERE       WaypointTraitSymbol = "TOXIC_ATMOSPHERE"
	TRADINGHUB            WaypointTraitSymbol = "TRADING_HUB"
	UNCHARTED             WaypointTraitSymbol = "UNCHARTED"
	UNDERCONSTRUCTION     WaypointTraitSymbol = "UNDER_CONSTRUCTION"
	UNSTABLECOMPOSITION   WaypointTraitSymbol = "UNSTABLE_COMPOSITION"
	VASTRUINS             WaypointTraitSymbol = "VAST_RUINS"
	VIBRANTAURORAS        WaypointTraitSymbol = "VIBRANT_AURORAS"
	VOLCANIC              WaypointTraitSymbol = "VOLCANIC"
	WEAKGRAVITY           WaypointTraitSymbol = "WEAK_GRAVITY"
)

// Defines values for WaypointType.
const (
	ARTIFICIALGRAVITYWELL WaypointType = "ARTIFICIAL_GRAVITY_WELL"
	ASTEROID              WaypointType = "ASTEROID"
	ASTEROIDBASE          WaypointType = "ASTEROID_BASE"
	ASTEROIDFIELD         WaypointType = "ASTEROID_FIELD"
	DEBRISFIELD           WaypointType = "DEBRIS_FIELD"
	ENGINEEREDASTEROID    WaypointType = "ENGINEERED_ASTEROID"
	FUELSTATION           WaypointType = "FUEL_STATION"
	GASGIANT              WaypointType = "GAS_GIANT"
	GRAVITYWELL           WaypointType = "GRAVITY_WELL"
	JUMPGATE              WaypointType = "JUMP_GATE"
	MOON                  WaypointType = "MOON"
	NEBULA                WaypointType = "NEBULA"
	ORBITALSTATION        WaypointType = "ORBITAL_STATION"
	PLANET                WaypointType = "PLANET"
)

// Defines values for ShipRefineJSONBodyProduce.
const (
	ALUMINUM ShipRefineJSONBodyProduce = "ALUMINUM"
	COPPER   ShipRefineJSONBodyProduce = "COPPER"
	FUEL     ShipRefineJSONBodyProduce = "FUEL"
	GOLD     ShipRefineJSONBodyProduce = "GOLD"
	IRON     ShipRefineJSONBodyProduce = "IRON"
	MERITIUM ShipRefineJSONBodyProduce = "MERITIUM"
	PLATINUM ShipRefineJSONBodyProduce = "PLATINUM"
	SILVER   ShipRefineJSONBodyProduce = "SILVER"
	URANITE  ShipRefineJSONBodyProduce = "URANITE"
)

// ActivityLevel The activity level of a trade good. If the good is an import, this represents how strong consumption is. If the good is an export, this represents how strong the production is for the good. When activity is strong, consumption or production is near maximum capacity. When activity is weak, consumption or production is near minimum capacity.
type ActivityLevel string

// Agent Agent details.
type Agent struct {
	// AccountId Account ID that is tied to this agent. Only included on your own agent.
	AccountId *string `json:"accountId,omitempty"`

	// Credits The number of credits the agent has available. Credits can be negative if funds have been overdrawn.
	Credits int64 `json:"credits"`

	// Headquarters The headquarters of the agent.
	Headquarters string `json:"headquarters"`

	// ShipCount How many ships are owned by the agent.
	ShipCount int `json:"shipCount"`

	// StartingFaction The faction the agent started with.
	StartingFaction string `json:"startingFaction"`

	// Symbol Symbol of the agent.
	Symbol string `json:"symbol"`
}

// Chart The chart of a system or waypoint, which makes the location visible to other agents.
type Chart struct {
	// SubmittedBy The agent that submitted the chart for this waypoint.
	SubmittedBy *string `json:"submittedBy,omitempty"`

	// SubmittedOn The time the chart for this waypoint was submitted.
	SubmittedOn *time.Time `json:"submittedOn,omitempty"`

	// WaypointSymbol The symbol of the waypoint.
	WaypointSymbol *WaypointSymbol `json:"waypointSymbol,omitempty"`
}

// Construction The construction details of a waypoint.
type Construction struct {
	// IsComplete Whether the waypoint has been constructed.
	IsComplete bool `json:"isComplete"`

	// Materials The materials required to construct the waypoint.
	Materials []ConstructionMaterial `json:"materials"`

	// Symbol The symbol of the waypoint.
	Symbol string `json:"symbol"`
}

// ConstructionMaterial The details of the required construction materials for a given waypoint under construction.
type ConstructionMaterial struct {
	// Fulfilled The number of units fulfilled toward the required amount.
	Fulfilled int `json:"fulfilled"`

	// Required The number of units required.
	Required int `json:"required"`

	// TradeSymbol The good's symbol.
	TradeSymbol TradeSymbol `json:"tradeSymbol"`
}

// Contract Contract details.
type Contract struct {
	// Accepted Whether the contract has been accepted by the agent
	Accepted bool `json:"accepted"`

	// DeadlineToAccept The time at which the contract is no longer available to be accepted
	DeadlineToAccept *time.Time `json:"deadlineToAccept,omitempty"`

	// Expiration Deprecated in favor of deadlineToAccept
	// Deprecated:
	Expiration time.Time `json:"expiration"`

	// FactionSymbol The symbol of the faction that this contract is for.
	FactionSymbol string `json:"factionSymbol"`

	// Fulfilled Whether the contract has been fulfilled
	Fulfilled bool `json:"fulfilled"`

	// Id ID of the contract.
	Id string `json:"id"`

	// Terms The terms to fulfill the contract.
	Terms ContractTerms `json:"terms"`

	// Type Type of contract.
	Type ContractType `json:"type"`
}

// ContractType Type of contract.
type ContractType string

// ContractDeliverGood The details of a delivery contract. Includes the type of good, units needed, and the destination.
type ContractDeliverGood struct {
	// DestinationSymbol The destination where goods need to be delivered.
	DestinationSymbol string `json:"destinationSymbol"`

	// TradeSymbol The symbol of the trade good to deliver.
	TradeSymbol string `json:"tradeSymbol"`

	// UnitsFulfilled The number of units fulfilled on this contract.
	UnitsFulfilled int `json:"unitsFulfilled"`

	// UnitsRequired The number of units that need to be delivered on this contract.
	UnitsRequired int `json:"unitsRequired"`
}

// ContractPayment Payments for the contract.
type ContractPayment struct {
	// OnAccepted The amount of credits received up front for accepting the contract.
	OnAccepted int `json:"onAccepted"`

	// OnFulfilled The amount of credits received when the contract is fulfilled.
	OnFulfilled int `json:"onFulfilled"`
}

// ContractTerms The terms to fulfill the contract.
type ContractTerms struct {
	// Deadline The deadline for the contract.
	Deadline time.Time `json:"deadline"`

	// Deliver The cargo that needs to be delivered to fulfill the contract.
	Deliver *[]ContractDeliverGood `json:"deliver,omitempty"`

	// Payment Payments for the contract.
	Payment ContractPayment `json:"payment"`
}

// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
type Cooldown struct {
	// Expiration The date and time when the cooldown expires in ISO 8601 format
	Expiration *time.Time `json:"expiration,omitempty"`

	// RemainingSeconds The remaining duration of the cooldown in seconds
	RemainingSeconds int `json:"remainingSeconds"`

	// ShipSymbol The symbol of the ship that is on cooldown
	ShipSymbol string `json:"shipSymbol"`

	// TotalSeconds The total duration of the cooldown in seconds
	TotalSeconds int `json:"totalSeconds"`
}

// Extraction Extraction details.
type Extraction struct {
	// ShipSymbol Symbol of the ship that executed the extraction.
	ShipSymbol string `json:"shipSymbol"`

	// Yield A yield from the extraction operation.
	Yield ExtractionYield `json:"yield"`
}

// ExtractionYield A yield from the extraction operation.
type ExtractionYield struct {
	// Symbol The good's symbol.
	Symbol TradeSymbol `json:"symbol"`

	// Units The number of units extracted that were placed into the ship's cargo hold.
	Units int `json:"units"`
}

// Faction Faction details.
type Faction struct {
	// Description Description of the faction.
	Description string `json:"description"`

	// Headquarters The waypoint in which the faction's HQ is located in.
	Headquarters string `json:"headquarters"`

	// IsRecruiting Whether or not the faction is currently recruiting new agents.
	IsRecruiting bool `json:"isRecruiting"`

	// Name Name of the faction.
	Name string `json:"name"`

	// Symbol The symbol of the faction.
	Symbol FactionSymbol `json:"symbol"`

	// Traits List of traits that define this faction.
	Traits []FactionTrait `json:"traits"`
}

// FactionSymbol The symbol of the faction.
type FactionSymbol string

// FactionTrait defines model for FactionTrait.
type FactionTrait struct {
	// Description A description of the trait.
	Description string `json:"description"`

	// Name The name of the trait.
	Name string `json:"name"`

	// Symbol The unique identifier of the trait.
	Symbol FactionTraitSymbol `json:"symbol"`
}

// FactionTraitSymbol The unique identifier of the trait.
type FactionTraitSymbol string

// JumpGate defines model for JumpGate.
type JumpGate struct {
	// Connections All the gates that are connected to this waypoint.
	Connections []string `json:"connections"`

	// Symbol The symbol of the waypoint.
	Symbol WaypointSymbol `json:"symbol"`
}

// Market defines model for Market.
type Market struct {
	// Exchange The list of goods that are bought and sold between agents at this market.
	Exchange []TradeGood `json:"exchange"`

	// Exports The list of goods that are exported from this market.
	Exports []TradeGood `json:"exports"`

	// Imports The list of goods that are sought as imports in this market.
	Imports []TradeGood `json:"imports"`

	// Symbol The symbol of the market. The symbol is the same as the waypoint where the market is located.
	Symbol string `json:"symbol"`

	// TradeGoods The list of goods that are traded at this market. Visible only when a ship is present at the market.
	TradeGoods *[]MarketTradeGood `json:"tradeGoods,omitempty"`

	// Transactions The list of recent transactions at this market. Visible only when a ship is present at the market.
	Transactions *[]MarketTransaction `json:"transactions,omitempty"`
}

// MarketTradeGood defines model for MarketTradeGood.
type MarketTradeGood struct {
	// Activity The activity level of a trade good. If the good is an import, this represents how strong consumption is. If the good is an export, this represents how strong the production is for the good. When activity is strong, consumption or production is near maximum capacity. When activity is weak, consumption or production is near minimum capacity.
	Activity *ActivityLevel `json:"activity,omitempty"`

	// PurchasePrice The price at which this good can be purchased from the market.
	PurchasePrice int `json:"purchasePrice"`

	// SellPrice The price at which this good can be sold to the market.
	SellPrice int `json:"sellPrice"`

	// Supply The supply level of a trade good.
	Supply SupplyLevel `json:"supply"`

	// Symbol The good's symbol.
	Symbol TradeSymbol `json:"symbol"`

	// TradeVolume This is the maximum number of units that can be purchased or sold at this market in a single trade for this good. Trade volume also gives an indication of price volatility. A market with a low trade volume will have large price swings, while high trade volume will be more resilient to price changes.
	TradeVolume int `json:"tradeVolume"`

	// Type The type of trade good (export, import, or exchange).
	Type MarketTradeGoodType `json:"type"`
}

// MarketTradeGoodType The type of trade good (export, import, or exchange).
type MarketTradeGoodType string

// MarketTransaction Result of a transaction with a market.
type MarketTransaction struct {
	// PricePerUnit The price per unit of the transaction.
	PricePerUnit int `json:"pricePerUnit"`

	// ShipSymbol The symbol of the ship that made the transaction.
	ShipSymbol string `json:"shipSymbol"`

	// Timestamp The timestamp of the transaction.
	Timestamp time.Time `json:"timestamp"`

	// TotalPrice The total price of the transaction.
	TotalPrice int `json:"totalPrice"`

	// TradeSymbol The symbol of the trade good.
	TradeSymbol string `json:"tradeSymbol"`

	// Type The type of transaction.
	Type MarketTransactionType `json:"type"`

	// Units The number of units of the transaction.
	Units int `json:"units"`

	// WaypointSymbol The symbol of the waypoint.
	WaypointSymbol WaypointSymbol `json:"waypointSymbol"`
}

// MarketTransactionType The type of transaction.
type MarketTransactionType string

// Meta Meta details for pagination.
type Meta struct {
	// Limit The amount of items in each page. Limits how many items can be fetched at once.
	Limit int `json:"limit"`

	// Page A page denotes an amount of items, offset from the first item. Each page holds an amount of items equal to the `limit`.
	Page int `json:"page"`

	// Total Shows the total amount of items of this kind that exist.
	Total int `json:"total"`
}

// ScannedShip The ship that was scanned. Details include information about the ship that could be detected by the scanner.
type ScannedShip struct {
	// Engine The engine of the ship.
	Engine struct {
		// Symbol The symbol of the engine.
		Symbol string `json:"symbol"`
	} `json:"engine"`

	// Frame The frame of the ship.
	Frame *struct {
		// Symbol The symbol of the frame.
		Symbol string `json:"symbol"`
	} `json:"frame,omitempty"`

	// Mounts List of mounts installed in the ship.
	Mounts *[]struct {
		// Symbol The symbol of the mount.
		Symbol string `json:"symbol"`
	} `json:"mounts,omitempty"`

	// Nav The navigation information of the ship.
	Nav ShipNav `json:"nav"`

	// Reactor The reactor of the ship.
	Reactor *struct {
		// Symbol The symbol of the reactor.
		Symbol string `json:"symbol"`
	} `json:"reactor,omitempty"`

	// Registration The public registration information of the ship
	Registration ShipRegistration `json:"registration"`

	// Symbol The globally unique identifier of the ship.
	Symbol string `json:"symbol"`
}

// ScannedSystem Details of a system was that scanned.
type ScannedSystem struct {
	// Distance The system's distance from the scanning ship.
	Distance int `json:"distance"`

	// SectorSymbol Symbol of the system's sector.
	SectorSymbol string `json:"sectorSymbol"`

	// Symbol Symbol of the system.
	Symbol string `json:"symbol"`

	// Type The type of system.
	Type SystemType `json:"type"`

	// X Position in the universe in the x axis.
	X int `json:"x"`

	// Y Position in the universe in the y axis.
	Y int `json:"y"`
}

// ScannedWaypoint A waypoint that was scanned by a ship.
type ScannedWaypoint struct {
	// Chart The chart of a system or waypoint, which makes the location visible to other agents.
	Chart *Chart `json:"chart,omitempty"`

	// Faction The faction that controls the waypoint.
	Faction *WaypointFaction `json:"faction,omitempty"`

	// Orbitals List of waypoints that orbit this waypoint.
	Orbitals []WaypointOrbital `json:"orbitals"`

	// Symbol The symbol of the waypoint.
	Symbol WaypointSymbol `json:"symbol"`

	// SystemSymbol The symbol of the system.
	SystemSymbol SystemSymbol `json:"systemSymbol"`

	// Traits The traits of the waypoint.
	Traits []WaypointTrait `json:"traits"`

	// Type The type of waypoint.
	Type WaypointType `json:"type"`

	// X Position in the universe in the x axis.
	X int `json:"x"`

	// Y Position in the universe in the y axis.
	Y int `json:"y"`
}

// Ship Ship details.
type Ship struct {
	// Cargo Ship cargo details.
	Cargo ShipCargo `json:"cargo"`

	// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
	Cooldown Cooldown `json:"cooldown"`

	// Crew The ship's crew service and maintain the ship's systems and equipment.
	Crew ShipCrew `json:"crew"`

	// Engine The engine determines how quickly a ship travels between waypoints.
	Engine ShipEngine `json:"engine"`

	// Frame The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
	Frame ShipFrame `json:"frame"`

	// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
	Fuel ShipFuel `json:"fuel"`

	// Modules Modules installed in this ship.
	Modules []ShipModule `json:"modules"`

	// Mounts Mounts installed in this ship.
	Mounts []ShipMount `json:"mounts"`

	// Nav The navigation information of the ship.
	Nav ShipNav `json:"nav"`

	// Reactor The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.
	Reactor ShipReactor `json:"reactor"`

	// Registration The public registration information of the ship
	Registration ShipRegistration `json:"registration"`

	// Symbol The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`
	Symbol string `json:"symbol"`
}

// ShipCargo Ship cargo details.
type ShipCargo struct {
	// Capacity The max number of items that can be stored in the cargo hold.
	Capacity int `json:"capacity"`

	// Inventory The items currently in the cargo hold.
	Inventory []ShipCargoItem `json:"inventory"`

	// Units The number of items currently stored in the cargo hold.
	Units int `json:"units"`
}

// ShipCargoItem The type of cargo item and the number of units.
type ShipCargoItem struct {
	// Description The description of the cargo item type.
	Description string `json:"description"`

	// Name The name of the cargo item type.
	Name string `json:"name"`

	// Symbol The good's symbol.
	Symbol TradeSymbol `json:"symbol"`

	// Units The number of units of the cargo item.
	Units int `json:"units"`
}

// ShipCondition Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
type ShipCondition = int

// ShipCrew The ship's crew service and maintain the ship's systems and equipment.
type ShipCrew struct {
	// Capacity The maximum number of crew members the ship can support.
	Capacity int `json:"capacity"`

	// Current The current number of crew members on the ship.
	Current int `json:"current"`

	// Morale A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.
	Morale int `json:"morale"`

	// Required The minimum number of crew members required to maintain the ship.
	Required int `json:"required"`

	// Rotation The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.
	Rotation ShipCrewRotation `json:"rotation"`

	// Wages The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.
	Wages int `json:"wages"`
}

// ShipCrewRotation The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.
type ShipCrewRotation string

// ShipEngine The engine determines how quickly a ship travels between waypoints.
type ShipEngine struct {
	// Condition Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
	Condition *ShipCondition `json:"condition,omitempty"`

	// Description The description of the engine.
	Description string `json:"description"`

	// Name The name of the engine.
	Name string `json:"name"`

	// Requirements The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`

	// Speed The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.
	Speed int `json:"speed"`

	// Symbol The symbol of the engine.
	Symbol ShipEngineSymbol `json:"symbol"`
}

// ShipEngineSymbol The symbol of the engine.
type ShipEngineSymbol string

// ShipFrame The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
type ShipFrame struct {
	// Condition Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
	Condition *ShipCondition `json:"condition,omitempty"`

	// Description Description of the frame.
	Description string `json:"description"`

	// FuelCapacity The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.
	FuelCapacity int `json:"fuelCapacity"`

	// ModuleSlots The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.
	ModuleSlots int `json:"moduleSlots"`

	// MountingPoints The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.
	MountingPoints int `json:"mountingPoints"`

	// Name Name of the frame.
	Name string `json:"name"`

	// Requirements The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`

	// Symbol Symbol of the frame.
	Symbol ShipFrameSymbol `json:"symbol"`
}

// ShipFrameSymbol Symbol of the frame.
type ShipFrameSymbol string

// ShipFuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
type ShipFuel struct {
	// Capacity The maximum amount of fuel the ship's tanks can hold.
	Capacity int `json:"capacity"`

	// Consumed An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.
	Consumed *struct {
		// Amount The amount of fuel consumed by the most recent transit or action.
		Amount int `json:"amount"`

		// Timestamp The time at which the fuel was consumed.
		Timestamp time.Time `json:"timestamp"`
	} `json:"consumed,omitempty"`

	// Current The current amount of fuel in the ship's tanks.
	Current int `json:"current"`
}

// ShipModificationTransaction Result of a transaction for a ship modification, such as installing a mount or a module.
type ShipModificationTransaction struct {
	// ShipSymbol The symbol of the ship that made the transaction.
	ShipSymbol string `json:"shipSymbol"`

	// Timestamp The timestamp of the transaction.
	Timestamp time.Time `json:"timestamp"`

	// TotalPrice The total price of the transaction.
	TotalPrice int `json:"totalPrice"`

	// TradeSymbol The symbol of the trade good.
	TradeSymbol string `json:"tradeSymbol"`

	// WaypointSymbol The symbol of the waypoint where the transaction took place.
	WaypointSymbol string `json:"waypointSymbol"`
}

// ShipModule A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.
type ShipModule struct {
	// Capacity Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.
	Capacity *int `json:"capacity,omitempty"`

	// Description Description of this module.
	Description string `json:"description"`

	// Name Name of this module.
	Name string `json:"name"`

	// Range Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.
	Range *int `json:"range,omitempty"`

	// Requirements The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`

	// Symbol The symbol of the module.
	Symbol ShipModuleSymbol `json:"symbol"`
}

// ShipModuleSymbol The symbol of the module.
type ShipModuleSymbol string

// ShipMount A mount is installed on the exterier of a ship.
type ShipMount struct {
	// Deposits Mounts that have this value denote what goods can be produced from using the mount.
	Deposits *[]ShipMountDeposits `json:"deposits,omitempty"`

	// Description Description of this mount.
	Description *string `json:"description,omitempty"`

	// Name Name of this mount.
	Name string `json:"name"`

	// Requirements The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`

	// Strength Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.
	Strength *int `json:"strength,omitempty"`

	// Symbol Symbo of this mount.
	Symbol ShipMountSymbol `json:"symbol"`
}

// ShipMountDeposits defines model for ShipMount.Deposits.
type ShipMountDeposits string

// ShipMountSymbol Symbo of this mount.
type ShipMountSymbol string

// ShipNav The navigation information of the ship.
type ShipNav struct {
	// FlightMode The ship's set speed when traveling between waypoints or systems.
	FlightMode ShipNavFlightMode `json:"flightMode"`

	// Route The routing information for the ship's most recent transit or current location.
	Route ShipNavRoute `json:"route"`

	// Status The current status of the ship
	Status ShipNavStatus `json:"status"`

	// SystemSymbol The symbol of the system.
	SystemSymbol SystemSymbol `json:"systemSymbol"`

	// WaypointSymbol The symbol of the waypoint.
	WaypointSymbol WaypointSymbol `json:"waypointSymbol"`
}

// ShipNavFlightMode The ship's set speed when traveling between waypoints or systems.
type ShipNavFlightMode string

// ShipNavRoute The routing information for the ship's most recent transit or current location.
type ShipNavRoute struct {
	// Arrival The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.
	Arrival time.Time `json:"arrival"`

	// DepartureTime The date time of the ship's departure.
	DepartureTime time.Time `json:"departureTime"`

	// Destination The destination or departure of a ships nav route.
	Destination ShipNavRouteWaypoint `json:"destination"`

	// Origin The destination or departure of a ships nav route.
	Origin ShipNavRouteWaypoint `json:"origin"`
}

// ShipNavRouteWaypoint The destination or departure of a ships nav route.
type ShipNavRouteWaypoint struct {
	// Symbol The symbol of the waypoint.
	Symbol string `json:"symbol"`

	// SystemSymbol The symbol of the system.
	SystemSymbol SystemSymbol `json:"systemSymbol"`

	// Type The type of waypoint.
	Type WaypointType `json:"type"`

	// X Position in the universe in the x axis.
	X int `json:"x"`

	// Y Position in the universe in the y axis.
	Y int `json:"y"`
}

// ShipNavStatus The current status of the ship
type ShipNavStatus string

// ShipReactor The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.
type ShipReactor struct {
	// Condition Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
	Condition *ShipCondition `json:"condition,omitempty"`

	// Description Description of the reactor.
	Description string `json:"description"`

	// Name Name of the reactor.
	Name string `json:"name"`

	// PowerOutput The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.
	PowerOutput int `json:"powerOutput"`

	// Requirements The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`

	// Symbol Symbol of the reactor.
	Symbol ShipReactorSymbol `json:"symbol"`
}

// ShipReactorSymbol Symbol of the reactor.
type ShipReactorSymbol string

// ShipRegistration The public registration information of the ship
type ShipRegistration struct {
	// FactionSymbol The symbol of the faction the ship is registered with
	FactionSymbol string `json:"factionSymbol"`

	// Name The agent's registered name of the ship
	Name string `json:"name"`

	// Role The registered role of the ship
	Role ShipRole `json:"role"`
}

// ShipRequirements The requirements for installation on a ship
type ShipRequirements struct {
	// Crew The number of crew required for operation.
	Crew *int `json:"crew,omitempty"`

	// Power The amount of power required from the reactor.
	Power *int `json:"power,omitempty"`

	// Slots The number of module slots required for installation.
	Slots *int `json:"slots,omitempty"`
}

// ShipRole The registered role of the ship
type ShipRole string

// ShipType Type of ship
type ShipType string

// Shipyard defines model for Shipyard.
type Shipyard struct {
	// ModificationsFee The fee to modify a ship at this shipyard. This includes installing or removing modules and mounts on a ship. In the case of mounts, the fee is a flat rate per mount. In the case of modules, the fee is per slot the module occupies.
	ModificationsFee int `json:"modificationsFee"`

	// ShipTypes The list of ship types available for purchase at this shipyard.
	ShipTypes []struct {
		// Type Type of ship
		Type ShipType `json:"type"`
	} `json:"shipTypes"`

	// Ships The ships that are currently available for purchase at the shipyard.
	Ships *[]ShipyardShip `json:"ships,omitempty"`

	// Symbol The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located.
	Symbol string `json:"symbol"`

	// Transactions The list of recent transactions at this shipyard.
	Transactions *[]ShipyardTransaction `json:"transactions,omitempty"`
}

// ShipyardShip defines model for ShipyardShip.
type ShipyardShip struct {
	// Activity The activity level of a trade good. If the good is an import, this represents how strong consumption is. If the good is an export, this represents how strong the production is for the good. When activity is strong, consumption or production is near maximum capacity. When activity is weak, consumption or production is near minimum capacity.
	Activity *ActivityLevel `json:"activity,omitempty"`
	Crew     struct {
		Capacity int `json:"capacity"`
		Required int `json:"required"`
	} `json:"crew"`
	Description string `json:"description"`

	// Engine The engine determines how quickly a ship travels between waypoints.
	Engine ShipEngine `json:"engine"`

	// Frame The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
	Frame         ShipFrame    `json:"frame"`
	Modules       []ShipModule `json:"modules"`
	Mounts        []ShipMount  `json:"mounts"`
	Name          string       `json:"name"`
	PurchasePrice int          `json:"purchasePrice"`

	// Reactor The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.
	Reactor ShipReactor `json:"reactor"`

	// Supply The supply level of a trade good.
	Supply SupplyLevel `json:"supply"`

	// Type Type of ship
	Type ShipType `json:"type"`
}

// ShipyardTransaction Results of a transaction with a shipyard.
type ShipyardTransaction struct {
	// AgentSymbol The symbol of the agent that made the transaction.
	AgentSymbol string `json:"agentSymbol"`

	// Price The price of the transaction.
	Price int `json:"price"`

	// ShipSymbol The symbol of the ship that was the subject of the transaction.
	// Deprecated:
	ShipSymbol string `json:"shipSymbol"`

	// ShipType The symbol of the ship that was the subject of the transaction.
	ShipType string `json:"shipType"`

	// Timestamp The timestamp of the transaction.
	Timestamp time.Time `json:"timestamp"`

	// WaypointSymbol The symbol of the waypoint.
	WaypointSymbol WaypointSymbol `json:"waypointSymbol"`
}

// Siphon Siphon details.
type Siphon struct {
	// ShipSymbol Symbol of the ship that executed the siphon.
	ShipSymbol string `json:"shipSymbol"`

	// Yield A yield from the siphon operation.
	Yield SiphonYield `json:"yield"`
}

// SiphonYield A yield from the siphon operation.
type SiphonYield struct {
	// Symbol The good's symbol.
	Symbol TradeSymbol `json:"symbol"`

	// Units The number of units siphoned that were placed into the ship's cargo hold.
	Units int `json:"units"`
}

// SupplyLevel The supply level of a trade good.
type SupplyLevel string

// Survey A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.
type Survey struct {
	// Deposits A list of deposits that can be found at this location. A ship will extract one of these deposits when using this survey in an extraction request. If multiple deposits of the same type are present, the chance of extracting that deposit is increased.
	Deposits []SurveyDeposit `json:"deposits"`

	// Expiration The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.
	Expiration time.Time `json:"expiration"`

	// Signature A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.
	Signature string `json:"signature"`

	// Size The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.
	Size SurveySize `json:"size"`

	// Symbol The symbol of the waypoint that this survey is for.
	Symbol string `json:"symbol"`
}

// SurveySize The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.
type SurveySize string

// SurveyDeposit A surveyed deposit of a mineral or resource available for extraction.
type SurveyDeposit struct {
	// Symbol The symbol of the deposit.
	Symbol string `json:"symbol"`
}

// System defines model for System.
type System struct {
	// Factions Factions that control this system.
	Factions []SystemFaction `json:"factions"`

	// SectorSymbol The symbol of the sector.
	SectorSymbol string `json:"sectorSymbol"`

	// Symbol The symbol of the system.
	Symbol string `json:"symbol"`

	// Type The type of system.
	Type SystemType `json:"type"`

	// Waypoints Waypoints in this system.
	Waypoints []SystemWaypoint `json:"waypoints"`

	// X Relative position of the system in the sector in the x axis.
	X int `json:"x"`

	// Y Relative position of the system in the sector in the y axis.
	Y int `json:"y"`
}

// SystemFaction defines model for SystemFaction.
type SystemFaction struct {
	// Symbol The symbol of the faction.
	Symbol FactionSymbol `json:"symbol"`
}

// SystemSymbol The symbol of the system.
type SystemSymbol = string

// SystemType The type of system.
type SystemType string

// SystemWaypoint defines model for SystemWaypoint.
type SystemWaypoint struct {
	// Orbitals Waypoints that orbit this waypoint.
	Orbitals []WaypointOrbital `json:"orbitals"`

	// Orbits The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.
	Orbits *string `json:"orbits,omitempty"`

	// Symbol The symbol of the waypoint.
	Symbol WaypointSymbol `json:"symbol"`

	// Type The type of waypoint.
	Type WaypointType `json:"type"`

	// X Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.
	X int `json:"x"`

	// Y Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.
	Y int `json:"y"`
}

// TradeGood A good that can be traded for other goods or currency.
type TradeGood struct {
	// Description The description of the good.
	Description string `json:"description"`

	// Name The name of the good.
	Name string `json:"name"`

	// Symbol The good's symbol.
	Symbol TradeSymbol `json:"symbol"`
}

// TradeSymbol The good's symbol.
type TradeSymbol string

// Waypoint A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
type Waypoint struct {
	// Chart The chart of a system or waypoint, which makes the location visible to other agents.
	Chart *Chart `json:"chart,omitempty"`

	// Faction The faction that controls the waypoint.
	Faction *WaypointFaction `json:"faction,omitempty"`

	// IsUnderConstruction True if the waypoint is under construction.
	IsUnderConstruction bool `json:"isUnderConstruction"`

	// Modifiers The modifiers of the waypoint.
	Modifiers *[]WaypointModifier `json:"modifiers,omitempty"`

	// Orbitals Waypoints that orbit this waypoint.
	Orbitals []WaypointOrbital `json:"orbitals"`

	// Orbits The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.
	Orbits *string `json:"orbits,omitempty"`

	// Symbol The symbol of the waypoint.
	Symbol WaypointSymbol `json:"symbol"`

	// SystemSymbol The symbol of the system.
	SystemSymbol SystemSymbol `json:"systemSymbol"`

	// Traits The traits of the waypoint.
	Traits []WaypointTrait `json:"traits"`

	// Type The type of waypoint.
	Type WaypointType `json:"type"`

	// X Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.
	X int `json:"x"`

	// Y Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.
	Y int `json:"y"`
}

// WaypointFaction The faction that controls the waypoint.
type WaypointFaction struct {
	// Symbol The symbol of the faction.
	Symbol FactionSymbol `json:"symbol"`
}

// WaypointModifier defines model for WaypointModifier.
type WaypointModifier struct {
	// Description A description of the trait.
	Description string `json:"description"`

	// Name The name of the trait.
	Name string `json:"name"`

	// Symbol The unique identifier of the modifier.
	Symbol WaypointModifierSymbol `json:"symbol"`
}

// WaypointModifierSymbol The unique identifier of the modifier.
type WaypointModifierSymbol string

// WaypointOrbital An orbital is another waypoint that orbits a parent waypoint.
type WaypointOrbital struct {
	// Symbol The symbol of the orbiting waypoint.
	Symbol string `json:"symbol"`
}

// WaypointSymbol The symbol of the waypoint.
type WaypointSymbol = string

// WaypointTrait defines model for WaypointTrait.
type WaypointTrait struct {
	// Description A description of the trait.
	Description string `json:"description"`

	// Name The name of the trait.
	Name string `json:"name"`

	// Symbol The unique identifier of the trait.
	Symbol WaypointTraitSymbol `json:"symbol"`
}

// WaypointTraitSymbol The unique identifier of the trait.
type WaypointTraitSymbol string

// WaypointType The type of waypoint.
type WaypointType string

// GetAgentsParams defines parameters for GetAgents.
type GetAgentsParams struct {
	// Page What entry offset to request
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit How many entries to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetFactionsParams defines parameters for GetFactions.
type GetFactionsParams struct {
	// Page What entry offset to request
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit How many entries to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetContractsParams defines parameters for GetContracts.
type GetContractsParams struct {
	// Page What entry offset to request
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit How many entries to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// DeliverContractJSONBody defines parameters for DeliverContract.
type DeliverContractJSONBody struct {
	// ShipSymbol Symbol of a ship located in the destination to deliver a contract and that has a good to deliver in its cargo.
	ShipSymbol string `json:"shipSymbol"`

	// TradeSymbol The symbol of the good to deliver.
	TradeSymbol string `json:"tradeSymbol"`

	// Units Amount of units to deliver.
	Units int `json:"units"`
}

// GetMyShipsParams defines parameters for GetMyShips.
type GetMyShipsParams struct {
	// Page What entry offset to request
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit How many entries to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PurchaseShipJSONBody defines parameters for PurchaseShip.
type PurchaseShipJSONBody struct {
	// ShipType Type of ship
	ShipType ShipType `json:"shipType"`

	// WaypointSymbol The symbol of the waypoint you want to purchase the ship at.
	WaypointSymbol string `json:"waypointSymbol"`
}

// ExtractResourcesJSONBody defines parameters for ExtractResources.
type ExtractResourcesJSONBody struct {
	// Survey A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.
	Survey *Survey `json:"survey,omitempty"`
}

// JettisonJSONBody defines parameters for Jettison.
type JettisonJSONBody struct {
	// Symbol The good's symbol.
	Symbol TradeSymbol `json:"symbol"`

	// Units Amount of units to jettison of this good.
	Units int `json:"units"`
}

// JumpShipJSONBody defines parameters for JumpShip.
type JumpShipJSONBody struct {
	// WaypointSymbol The symbol of the waypoint to jump to. The destination must be a connected waypoint.
	WaypointSymbol string `json:"waypointSymbol"`
}

// InstallMountJSONBody defines parameters for InstallMount.
type InstallMountJSONBody struct {
	Symbol string `json:"symbol"`
}

// RemoveMountJSONBody defines parameters for RemoveMount.
type RemoveMountJSONBody struct {
	// Symbol The symbol of the mount to remove.
	Symbol string `json:"symbol"`
}

// PatchShipNavJSONBody defines parameters for PatchShipNav.
type PatchShipNavJSONBody struct {
	// FlightMode The ship's set speed when traveling between waypoints or systems.
	FlightMode *ShipNavFlightMode `json:"flightMode,omitempty"`
}

// NavigateShipJSONBody defines parameters for NavigateShip.
type NavigateShipJSONBody struct {
	// WaypointSymbol The target destination.
	WaypointSymbol string `json:"waypointSymbol"`
}

// PurchaseCargoJSONBody defines parameters for PurchaseCargo.
type PurchaseCargoJSONBody struct {
	// Symbol The good's symbol.
	Symbol TradeSymbol `json:"symbol"`

	// Units Amounts of units to purchase.
	Units int `json:"units"`
}

// ShipRefineJSONBody defines parameters for ShipRefine.
type ShipRefineJSONBody struct {
	// Produce The type of good to produce out of the refining process.
	Produce ShipRefineJSONBodyProduce `json:"produce"`
}

// ShipRefineJSONBodyProduce defines parameters for ShipRefine.
type ShipRefineJSONBodyProduce string

// RefuelShipJSONBody defines parameters for RefuelShip.
type RefuelShipJSONBody struct {
	// FromCargo Wether to use the FUEL thats in your cargo or not. Default: false
	FromCargo *bool `json:"fromCargo,omitempty"`

	// Units The amount of fuel to fill in the ship's tanks. When not specified, the ship will be refueled to its maximum fuel capacity. If the amount specified is greater than the ship's remaining capacity, the ship will only be refueled to its maximum fuel capacity. The amount specified is not in market units but in ship fuel units.
	Units *int `json:"units,omitempty"`
}

// SellCargoJSONBody defines parameters for SellCargo.
type SellCargoJSONBody struct {
	// Symbol The good's symbol.
	Symbol TradeSymbol `json:"symbol"`

	// Units Amounts of units to sell of the selected good.
	Units int `json:"units"`
}

// TransferCargoJSONBody defines parameters for TransferCargo.
type TransferCargoJSONBody struct {
	// ShipSymbol The symbol of the ship to transfer to.
	ShipSymbol string `json:"shipSymbol"`

	// TradeSymbol The good's symbol.
	TradeSymbol TradeSymbol `json:"tradeSymbol"`

	// Units Amount of units to transfer.
	Units int `json:"units"`
}

// WarpShipJSONBody defines parameters for WarpShip.
type WarpShipJSONBody struct {
	// WaypointSymbol The target destination.
	WaypointSymbol string `json:"waypointSymbol"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	// Email Your email address. This is used if you reserved your call sign between resets.
	Email *string `json:"email,omitempty"`

	// Faction The symbol of the faction.
	Faction FactionSymbol `json:"faction"`

	// Symbol Your desired agent symbol. This will be a unique name used to represent your agent, and will be the prefix for your ships.
	Symbol string `json:"symbol"`
}

// GetSystemsParams defines parameters for GetSystems.
type GetSystemsParams struct {
	// Page What entry offset to request
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit How many entries to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSystemWaypointsParams defines parameters for GetSystemWaypoints.
type GetSystemWaypointsParams struct {
	// Page What entry offset to request
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit How many entries to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Type Filter waypoints by type.
	Type *WaypointType `form:"type,omitempty" json:"type,omitempty"`

	// Traits Filter waypoints by one or more traits.
	Traits *struct {
		union json.RawMessage
	} `form:"traits,omitempty" json:"traits,omitempty"`
}

// GetSystemWaypointsParamsTraits1 defines parameters for GetSystemWaypoints.
type GetSystemWaypointsParamsTraits1 = []WaypointTraitSymbol

// SupplyConstructionJSONBody defines parameters for SupplyConstruction.
type SupplyConstructionJSONBody struct {
	// ShipSymbol Symbol of the ship to use.
	ShipSymbol string `json:"shipSymbol"`

	// TradeSymbol The symbol of the good to supply.
	TradeSymbol string `json:"tradeSymbol"`

	// Units Amount of units to supply.
	Units int `json:"units"`
}

// DeliverContractJSONRequestBody defines body for DeliverContract for application/json ContentType.
type DeliverContractJSONRequestBody DeliverContractJSONBody

// PurchaseShipJSONRequestBody defines body for PurchaseShip for application/json ContentType.
type PurchaseShipJSONRequestBody PurchaseShipJSONBody

// ExtractResourcesJSONRequestBody defines body for ExtractResources for application/json ContentType.
type ExtractResourcesJSONRequestBody ExtractResourcesJSONBody

// ExtractResourcesWithSurveyJSONRequestBody defines body for ExtractResourcesWithSurvey for application/json ContentType.
type ExtractResourcesWithSurveyJSONRequestBody = Survey

// JettisonJSONRequestBody defines body for Jettison for application/json ContentType.
type JettisonJSONRequestBody JettisonJSONBody

// JumpShipJSONRequestBody defines body for JumpShip for application/json ContentType.
type JumpShipJSONRequestBody JumpShipJSONBody

// InstallMountJSONRequestBody defines body for InstallMount for application/json ContentType.
type InstallMountJSONRequestBody InstallMountJSONBody

// RemoveMountJSONRequestBody defines body for RemoveMount for application/json ContentType.
type RemoveMountJSONRequestBody RemoveMountJSONBody

// PatchShipNavJSONRequestBody defines body for PatchShipNav for application/json ContentType.
type PatchShipNavJSONRequestBody PatchShipNavJSONBody

// NavigateShipJSONRequestBody defines body for NavigateShip for application/json ContentType.
type NavigateShipJSONRequestBody NavigateShipJSONBody

// PurchaseCargoJSONRequestBody defines body for PurchaseCargo for application/json ContentType.
type PurchaseCargoJSONRequestBody PurchaseCargoJSONBody

// ShipRefineJSONRequestBody defines body for ShipRefine for application/json ContentType.
type ShipRefineJSONRequestBody ShipRefineJSONBody

// RefuelShipJSONRequestBody defines body for RefuelShip for application/json ContentType.
type RefuelShipJSONRequestBody RefuelShipJSONBody

// SellCargoJSONRequestBody defines body for SellCargo for application/json ContentType.
type SellCargoJSONRequestBody SellCargoJSONBody

// TransferCargoJSONRequestBody defines body for TransferCargo for application/json ContentType.
type TransferCargoJSONRequestBody TransferCargoJSONBody

// WarpShipJSONRequestBody defines body for WarpShip for application/json ContentType.
type WarpShipJSONRequestBody WarpShipJSONBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

// SupplyConstructionJSONRequestBody defines body for SupplyConstruction for application/json ContentType.
type SupplyConstructionJSONRequestBody SupplyConstructionJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgents request
	GetAgents(ctx context.Context, params *GetAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgent request
	GetAgent(ctx context.Context, agentSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFactions request
	GetFactions(ctx context.Context, params *GetFactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFaction request
	GetFaction(ctx context.Context, factionSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyAgent request
	GetMyAgent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContracts request
	GetContracts(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContract request
	GetContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcceptContract request
	AcceptContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeliverContractWithBody request with any body
	DeliverContractWithBody(ctx context.Context, contractId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeliverContract(ctx context.Context, contractId string, body DeliverContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FulfillContract request
	FulfillContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyShips request
	GetMyShips(ctx context.Context, params *GetMyShipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PurchaseShipWithBody request with any body
	PurchaseShipWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PurchaseShip(ctx context.Context, body PurchaseShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyShip request
	GetMyShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyShipCargo request
	GetMyShipCargo(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateChart request
	CreateChart(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShipCooldown request
	GetShipCooldown(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DockShip request
	DockShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtractResourcesWithBody request with any body
	ExtractResourcesWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExtractResources(ctx context.Context, shipSymbol string, body ExtractResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtractResourcesWithSurveyWithBody request with any body
	ExtractResourcesWithSurveyWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExtractResourcesWithSurvey(ctx context.Context, shipSymbol string, body ExtractResourcesWithSurveyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JettisonWithBody request with any body
	JettisonWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Jettison(ctx context.Context, shipSymbol string, body JettisonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JumpShipWithBody request with any body
	JumpShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JumpShip(ctx context.Context, shipSymbol string, body JumpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMounts request
	GetMounts(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstallMountWithBody request with any body
	InstallMountWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstallMount(ctx context.Context, shipSymbol string, body InstallMountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveMountWithBody request with any body
	RemoveMountWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveMount(ctx context.Context, shipSymbol string, body RemoveMountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShipNav request
	GetShipNav(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchShipNavWithBody request with any body
	PatchShipNavWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchShipNav(ctx context.Context, shipSymbol string, body PatchShipNavJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NavigateShipWithBody request with any body
	NavigateShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NavigateShip(ctx context.Context, shipSymbol string, body NavigateShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NegotiateContract request
	NegotiateContract(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrbitShip request
	OrbitShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PurchaseCargoWithBody request with any body
	PurchaseCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PurchaseCargo(ctx context.Context, shipSymbol string, body PurchaseCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShipRefineWithBody request with any body
	ShipRefineWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShipRefine(ctx context.Context, shipSymbol string, body ShipRefineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefuelShipWithBody request with any body
	RefuelShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RefuelShip(ctx context.Context, shipSymbol string, body RefuelShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShipShipScan request
	CreateShipShipScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShipSystemScan request
	CreateShipSystemScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShipWaypointScan request
	CreateShipWaypointScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SellCargoWithBody request with any body
	SellCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SellCargo(ctx context.Context, shipSymbol string, body SellCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SiphonResources request
	SiphonResources(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSurvey request
	CreateSurvey(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TransferCargoWithBody request with any body
	TransferCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TransferCargo(ctx context.Context, shipSymbol string, body TransferCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WarpShipWithBody request with any body
	WarpShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WarpShip(ctx context.Context, shipSymbol string, body WarpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterWithBody request with any body
	RegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Register(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystems request
	GetSystems(ctx context.Context, params *GetSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystem request
	GetSystem(ctx context.Context, systemSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemWaypoints request
	GetSystemWaypoints(ctx context.Context, systemSymbol string, params *GetSystemWaypointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWaypoint request
	GetWaypoint(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConstruction request
	GetConstruction(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SupplyConstructionWithBody request with any body
	SupplyConstructionWithBody(ctx context.Context, systemSymbol string, waypointSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SupplyConstruction(ctx context.Context, systemSymbol string, waypointSymbol string, body SupplyConstructionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJumpGate request
	GetJumpGate(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarket request
	GetMarket(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShipyard request
	GetShipyard(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgents(ctx context.Context, params *GetAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgent(ctx context.Context, agentSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentRequest(c.Server, agentSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFactions(ctx context.Context, params *GetFactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFactionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFaction(ctx context.Context, factionSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFactionRequest(c.Server, factionSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyAgent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyAgentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContracts(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractRequest(c.Server, contractId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptContractRequest(c.Server, contractId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeliverContractWithBody(ctx context.Context, contractId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeliverContractRequestWithBody(c.Server, contractId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeliverContract(ctx context.Context, contractId string, body DeliverContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeliverContractRequest(c.Server, contractId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FulfillContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFulfillContractRequest(c.Server, contractId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyShips(ctx context.Context, params *GetMyShipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyShipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PurchaseShipWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPurchaseShipRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PurchaseShip(ctx context.Context, body PurchaseShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPurchaseShipRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyShipRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyShipCargo(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyShipCargoRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChart(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChartRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShipCooldown(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShipCooldownRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DockShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDockShipRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtractResourcesWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtractResourcesRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtractResources(ctx context.Context, shipSymbol string, body ExtractResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtractResourcesRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtractResourcesWithSurveyWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtractResourcesWithSurveyRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtractResourcesWithSurvey(ctx context.Context, shipSymbol string, body ExtractResourcesWithSurveyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtractResourcesWithSurveyRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JettisonWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJettisonRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Jettison(ctx context.Context, shipSymbol string, body JettisonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJettisonRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JumpShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJumpShipRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JumpShip(ctx context.Context, shipSymbol string, body JumpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJumpShipRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMounts(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMountsRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallMountWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallMountRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallMount(ctx context.Context, shipSymbol string, body InstallMountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallMountRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMountWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMountRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMount(ctx context.Context, shipSymbol string, body RemoveMountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMountRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShipNav(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShipNavRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchShipNavWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchShipNavRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchShipNav(ctx context.Context, shipSymbol string, body PatchShipNavJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchShipNavRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NavigateShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNavigateShipRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NavigateShip(ctx context.Context, shipSymbol string, body NavigateShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNavigateShipRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NegotiateContract(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNegotiateContractRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrbitShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrbitShipRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PurchaseCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPurchaseCargoRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PurchaseCargo(ctx context.Context, shipSymbol string, body PurchaseCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPurchaseCargoRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShipRefineWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShipRefineRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShipRefine(ctx context.Context, shipSymbol string, body ShipRefineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShipRefineRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefuelShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefuelShipRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefuelShip(ctx context.Context, shipSymbol string, body RefuelShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefuelShipRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShipShipScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShipShipScanRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShipSystemScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShipSystemScanRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShipWaypointScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShipWaypointScanRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SellCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSellCargoRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SellCargo(ctx context.Context, shipSymbol string, body SellCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSellCargoRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SiphonResources(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSiphonResourcesRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSurvey(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSurveyRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TransferCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransferCargoRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TransferCargo(ctx context.Context, shipSymbol string, body TransferCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransferCargoRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WarpShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWarpShipRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WarpShip(ctx context.Context, shipSymbol string, body WarpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWarpShipRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Register(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystems(ctx context.Context, params *GetSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystem(ctx context.Context, systemSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemRequest(c.Server, systemSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemWaypoints(ctx context.Context, systemSymbol string, params *GetSystemWaypointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemWaypointsRequest(c.Server, systemSymbol, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWaypoint(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWaypointRequest(c.Server, systemSymbol, waypointSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConstruction(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConstructionRequest(c.Server, systemSymbol, waypointSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SupplyConstructionWithBody(ctx context.Context, systemSymbol string, waypointSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSupplyConstructionRequestWithBody(c.Server, systemSymbol, waypointSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SupplyConstruction(ctx context.Context, systemSymbol string, waypointSymbol string, body SupplyConstructionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSupplyConstructionRequest(c.Server, systemSymbol, waypointSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJumpGate(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJumpGateRequest(c.Server, systemSymbol, waypointSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarket(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarketRequest(c.Server, systemSymbol, waypointSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShipyard(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShipyardRequest(c.Server, systemSymbol, waypointSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentsRequest generates requests for GetAgents
func NewGetAgentsRequest(server string, params *GetAgentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentRequest generates requests for GetAgent
func NewGetAgentRequest(server string, agentSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentSymbol", runtime.ParamLocationPath, agentSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFactionsRequest generates requests for GetFactions
func NewGetFactionsRequest(server string, params *GetFactionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/factions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFactionRequest generates requests for GetFaction
func NewGetFactionRequest(server string, factionSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "factionSymbol", runtime.ParamLocationPath, factionSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/factions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyAgentRequest generates requests for GetMyAgent
func NewGetMyAgentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/agent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContractsRequest generates requests for GetContracts
func NewGetContractsRequest(server string, params *GetContractsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/contracts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContractRequest generates requests for GetContract
func NewGetContractRequest(server string, contractId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contractId", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/contracts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcceptContractRequest generates requests for AcceptContract
func NewAcceptContractRequest(server string, contractId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contractId", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/contracts/%s/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeliverContractRequest calls the generic DeliverContract builder with application/json body
func NewDeliverContractRequest(server string, contractId string, body DeliverContractJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeliverContractRequestWithBody(server, contractId, "application/json", bodyReader)
}

// NewDeliverContractRequestWithBody generates requests for DeliverContract with any type of body
func NewDeliverContractRequestWithBody(server string, contractId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contractId", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/contracts/%s/deliver", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFulfillContractRequest generates requests for FulfillContract
func NewFulfillContractRequest(server string, contractId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contractId", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/contracts/%s/fulfill", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyShipsRequest generates requests for GetMyShips
func NewGetMyShipsRequest(server string, params *GetMyShipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPurchaseShipRequest calls the generic PurchaseShip builder with application/json body
func NewPurchaseShipRequest(server string, body PurchaseShipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPurchaseShipRequestWithBody(server, "application/json", bodyReader)
}

// NewPurchaseShipRequestWithBody generates requests for PurchaseShip with any type of body
func NewPurchaseShipRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMyShipRequest generates requests for GetMyShip
func NewGetMyShipRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyShipCargoRequest generates requests for GetMyShipCargo
func NewGetMyShipCargoRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/cargo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateChartRequest generates requests for CreateChart
func NewCreateChartRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShipCooldownRequest generates requests for GetShipCooldown
func NewGetShipCooldownRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/cooldown", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDockShipRequest generates requests for DockShip
func NewDockShipRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/dock", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExtractResourcesRequest calls the generic ExtractResources builder with application/json body
func NewExtractResourcesRequest(server string, shipSymbol string, body ExtractResourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExtractResourcesRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewExtractResourcesRequestWithBody generates requests for ExtractResources with any type of body
func NewExtractResourcesRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/extract", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExtractResourcesWithSurveyRequest calls the generic ExtractResourcesWithSurvey builder with application/json body
func NewExtractResourcesWithSurveyRequest(server string, shipSymbol string, body ExtractResourcesWithSurveyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExtractResourcesWithSurveyRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewExtractResourcesWithSurveyRequestWithBody generates requests for ExtractResourcesWithSurvey with any type of body
func NewExtractResourcesWithSurveyRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/extract/survey", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJettisonRequest calls the generic Jettison builder with application/json body
func NewJettisonRequest(server string, shipSymbol string, body JettisonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJettisonRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewJettisonRequestWithBody generates requests for Jettison with any type of body
func NewJettisonRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/jettison", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJumpShipRequest calls the generic JumpShip builder with application/json body
func NewJumpShipRequest(server string, shipSymbol string, body JumpShipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJumpShipRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewJumpShipRequestWithBody generates requests for JumpShip with any type of body
func NewJumpShipRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/jump", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMountsRequest generates requests for GetMounts
func NewGetMountsRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/mounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstallMountRequest calls the generic InstallMount builder with application/json body
func NewInstallMountRequest(server string, shipSymbol string, body InstallMountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstallMountRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewInstallMountRequestWithBody generates requests for InstallMount with any type of body
func NewInstallMountRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/mounts/install", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveMountRequest calls the generic RemoveMount builder with application/json body
func NewRemoveMountRequest(server string, shipSymbol string, body RemoveMountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveMountRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewRemoveMountRequestWithBody generates requests for RemoveMount with any type of body
func NewRemoveMountRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/mounts/remove", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShipNavRequest generates requests for GetShipNav
func NewGetShipNavRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/nav", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchShipNavRequest calls the generic PatchShipNav builder with application/json body
func NewPatchShipNavRequest(server string, shipSymbol string, body PatchShipNavJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchShipNavRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewPatchShipNavRequestWithBody generates requests for PatchShipNav with any type of body
func NewPatchShipNavRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/nav", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNavigateShipRequest calls the generic NavigateShip builder with application/json body
func NewNavigateShipRequest(server string, shipSymbol string, body NavigateShipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNavigateShipRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewNavigateShipRequestWithBody generates requests for NavigateShip with any type of body
func NewNavigateShipRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/navigate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNegotiateContractRequest generates requests for NegotiateContract
func NewNegotiateContractRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/negotiate/contract", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrbitShipRequest generates requests for OrbitShip
func NewOrbitShipRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/orbit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPurchaseCargoRequest calls the generic PurchaseCargo builder with application/json body
func NewPurchaseCargoRequest(server string, shipSymbol string, body PurchaseCargoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPurchaseCargoRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewPurchaseCargoRequestWithBody generates requests for PurchaseCargo with any type of body
func NewPurchaseCargoRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/purchase", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShipRefineRequest calls the generic ShipRefine builder with application/json body
func NewShipRefineRequest(server string, shipSymbol string, body ShipRefineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewShipRefineRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewShipRefineRequestWithBody generates requests for ShipRefine with any type of body
func NewShipRefineRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/refine", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRefuelShipRequest calls the generic RefuelShip builder with application/json body
func NewRefuelShipRequest(server string, shipSymbol string, body RefuelShipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRefuelShipRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewRefuelShipRequestWithBody generates requests for RefuelShip with any type of body
func NewRefuelShipRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/refuel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateShipShipScanRequest generates requests for CreateShipShipScan
func NewCreateShipShipScanRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/scan/ships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateShipSystemScanRequest generates requests for CreateShipSystemScan
func NewCreateShipSystemScanRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/scan/systems", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateShipWaypointScanRequest generates requests for CreateShipWaypointScan
func NewCreateShipWaypointScanRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/scan/waypoints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSellCargoRequest calls the generic SellCargo builder with application/json body
func NewSellCargoRequest(server string, shipSymbol string, body SellCargoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSellCargoRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewSellCargoRequestWithBody generates requests for SellCargo with any type of body
func NewSellCargoRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/sell", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSiphonResourcesRequest generates requests for SiphonResources
func NewSiphonResourcesRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/siphon", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSurveyRequest generates requests for CreateSurvey
func NewCreateSurveyRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/survey", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTransferCargoRequest calls the generic TransferCargo builder with application/json body
func NewTransferCargoRequest(server string, shipSymbol string, body TransferCargoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTransferCargoRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewTransferCargoRequestWithBody generates requests for TransferCargo with any type of body
func NewTransferCargoRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/transfer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWarpShipRequest calls the generic WarpShip builder with application/json body
func NewWarpShipRequest(server string, shipSymbol string, body WarpShipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWarpShipRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewWarpShipRequestWithBody generates requests for WarpShip with any type of body
func NewWarpShipRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/warp", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterRequest calls the generic Register builder with application/json body
func NewRegisterRequest(server string, body RegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterRequestWithBody generates requests for Register with any type of body
func NewRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemsRequest generates requests for GetSystems
func NewGetSystemsRequest(server string, params *GetSystemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemRequest generates requests for GetSystem
func NewGetSystemRequest(server string, systemSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemWaypointsRequest generates requests for GetSystemWaypoints
func NewGetSystemWaypointsRequest(server string, systemSymbol string, params *GetSystemWaypointsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Traits != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "traits", runtime.ParamLocationQuery, *params.Traits); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWaypointRequest generates requests for GetWaypoint
func NewGetWaypointRequest(server string, systemSymbol string, waypointSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, waypointSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConstructionRequest generates requests for GetConstruction
func NewGetConstructionRequest(server string, systemSymbol string, waypointSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, waypointSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints/%s/construction", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSupplyConstructionRequest calls the generic SupplyConstruction builder with application/json body
func NewSupplyConstructionRequest(server string, systemSymbol string, waypointSymbol string, body SupplyConstructionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSupplyConstructionRequestWithBody(server, systemSymbol, waypointSymbol, "application/json", bodyReader)
}

// NewSupplyConstructionRequestWithBody generates requests for SupplyConstruction with any type of body
func NewSupplyConstructionRequestWithBody(server string, systemSymbol string, waypointSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, waypointSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints/%s/construction/supply", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJumpGateRequest generates requests for GetJumpGate
func NewGetJumpGateRequest(server string, systemSymbol string, waypointSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, waypointSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints/%s/jump-gate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMarketRequest generates requests for GetMarket
func NewGetMarketRequest(server string, systemSymbol string, waypointSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, waypointSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints/%s/market", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShipyardRequest generates requests for GetShipyard
func NewGetShipyardRequest(server string, systemSymbol string, waypointSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, waypointSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints/%s/shipyard", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetStatusWithResponse request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)

	// GetAgentsWithResponse request
	GetAgentsWithResponse(ctx context.Context, params *GetAgentsParams, reqEditors ...RequestEditorFn) (*GetAgentsResponse, error)

	// GetAgentWithResponse request
	GetAgentWithResponse(ctx context.Context, agentSymbol string, reqEditors ...RequestEditorFn) (*GetAgentResponse, error)

	// GetFactionsWithResponse request
	GetFactionsWithResponse(ctx context.Context, params *GetFactionsParams, reqEditors ...RequestEditorFn) (*GetFactionsResponse, error)

	// GetFactionWithResponse request
	GetFactionWithResponse(ctx context.Context, factionSymbol string, reqEditors ...RequestEditorFn) (*GetFactionResponse, error)

	// GetMyAgentWithResponse request
	GetMyAgentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyAgentResponse, error)

	// GetContractsWithResponse request
	GetContractsWithResponse(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*GetContractsResponse, error)

	// GetContractWithResponse request
	GetContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*GetContractResponse, error)

	// AcceptContractWithResponse request
	AcceptContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*AcceptContractResponse, error)

	// DeliverContractWithBodyWithResponse request with any body
	DeliverContractWithBodyWithResponse(ctx context.Context, contractId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeliverContractResponse, error)

	DeliverContractWithResponse(ctx context.Context, contractId string, body DeliverContractJSONRequestBody, reqEditors ...RequestEditorFn) (*DeliverContractResponse, error)

	// FulfillContractWithResponse request
	FulfillContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*FulfillContractResponse, error)

	// GetMyShipsWithResponse request
	GetMyShipsWithResponse(ctx context.Context, params *GetMyShipsParams, reqEditors ...RequestEditorFn) (*GetMyShipsResponse, error)

	// PurchaseShipWithBodyWithResponse request with any body
	PurchaseShipWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PurchaseShipResponse, error)

	PurchaseShipWithResponse(ctx context.Context, body PurchaseShipJSONRequestBody, reqEditors ...RequestEditorFn) (*PurchaseShipResponse, error)

	// GetMyShipWithResponse request
	GetMyShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetMyShipResponse, error)

	// GetMyShipCargoWithResponse request
	GetMyShipCargoWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetMyShipCargoResponse, error)

	// CreateChartWithResponse request
	CreateChartWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateChartResponse, error)

	// GetShipCooldownWithResponse request
	GetShipCooldownWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetShipCooldownResponse, error)

	// DockShipWithResponse request
	DockShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*DockShipResponse, error)

	// ExtractResourcesWithBodyWithResponse request with any body
	ExtractResourcesWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtractResourcesResponse, error)

	ExtractResourcesWithResponse(ctx context.Context, shipSymbol string, body ExtractResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtractResourcesResponse, error)

	// ExtractResourcesWithSurveyWithBodyWithResponse request with any body
	ExtractResourcesWithSurveyWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtractResourcesWithSurveyResponse, error)

	ExtractResourcesWithSurveyWithResponse(ctx context.Context, shipSymbol string, body ExtractResourcesWithSurveyJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtractResourcesWithSurveyResponse, error)

	// JettisonWithBodyWithResponse request with any body
	JettisonWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JettisonResponse, error)

	JettisonWithResponse(ctx context.Context, shipSymbol string, body JettisonJSONRequestBody, reqEditors ...RequestEditorFn) (*JettisonResponse, error)

	// JumpShipWithBodyWithResponse request with any body
	JumpShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JumpShipResponse, error)

	JumpShipWithResponse(ctx context.Context, shipSymbol string, body JumpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*JumpShipResponse, error)

	// GetMountsWithResponse request
	GetMountsWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetMountsResponse, error)

	// InstallMountWithBodyWithResponse request with any body
	InstallMountWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstallMountResponse, error)

	InstallMountWithResponse(ctx context.Context, shipSymbol string, body InstallMountJSONRequestBody, reqEditors ...RequestEditorFn) (*InstallMountResponse, error)

	// RemoveMountWithBodyWithResponse request with any body
	RemoveMountWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveMountResponse, error)

	RemoveMountWithResponse(ctx context.Context, shipSymbol string, body RemoveMountJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveMountResponse, error)

	// GetShipNavWithResponse request
	GetShipNavWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetShipNavResponse, error)

	// PatchShipNavWithBodyWithResponse request with any body
	PatchShipNavWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchShipNavResponse, error)

	PatchShipNavWithResponse(ctx context.Context, shipSymbol string, body PatchShipNavJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchShipNavResponse, error)

	// NavigateShipWithBodyWithResponse request with any body
	NavigateShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NavigateShipResponse, error)

	NavigateShipWithResponse(ctx context.Context, shipSymbol string, body NavigateShipJSONRequestBody, reqEditors ...RequestEditorFn) (*NavigateShipResponse, error)

	// NegotiateContractWithResponse request
	NegotiateContractWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*NegotiateContractResponse, error)

	// OrbitShipWithResponse request
	OrbitShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*OrbitShipResponse, error)

	// PurchaseCargoWithBodyWithResponse request with any body
	PurchaseCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PurchaseCargoResponse, error)

	PurchaseCargoWithResponse(ctx context.Context, shipSymbol string, body PurchaseCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*PurchaseCargoResponse, error)

	// ShipRefineWithBodyWithResponse request with any body
	ShipRefineWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShipRefineResponse, error)

	ShipRefineWithResponse(ctx context.Context, shipSymbol string, body ShipRefineJSONRequestBody, reqEditors ...RequestEditorFn) (*ShipRefineResponse, error)

	// RefuelShipWithBodyWithResponse request with any body
	RefuelShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RefuelShipResponse, error)

	RefuelShipWithResponse(ctx context.Context, shipSymbol string, body RefuelShipJSONRequestBody, reqEditors ...RequestEditorFn) (*RefuelShipResponse, error)

	// CreateShipShipScanWithResponse request
	CreateShipShipScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipShipScanResponse, error)

	// CreateShipSystemScanWithResponse request
	CreateShipSystemScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipSystemScanResponse, error)

	// CreateShipWaypointScanWithResponse request
	CreateShipWaypointScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipWaypointScanResponse, error)

	// SellCargoWithBodyWithResponse request with any body
	SellCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SellCargoResponse, error)

	SellCargoWithResponse(ctx context.Context, shipSymbol string, body SellCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*SellCargoResponse, error)

	// SiphonResourcesWithResponse request
	SiphonResourcesWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*SiphonResourcesResponse, error)

	// CreateSurveyWithResponse request
	CreateSurveyWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateSurveyResponse, error)

	// TransferCargoWithBodyWithResponse request with any body
	TransferCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferCargoResponse, error)

	TransferCargoWithResponse(ctx context.Context, shipSymbol string, body TransferCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*TransferCargoResponse, error)

	// WarpShipWithBodyWithResponse request with any body
	WarpShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WarpShipResponse, error)

	WarpShipWithResponse(ctx context.Context, shipSymbol string, body WarpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*WarpShipResponse, error)

	// RegisterWithBodyWithResponse request with any body
	RegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterResponse, error)

	RegisterWithResponse(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterResponse, error)

	// GetSystemsWithResponse request
	GetSystemsWithResponse(ctx context.Context, params *GetSystemsParams, reqEditors ...RequestEditorFn) (*GetSystemsResponse, error)

	// GetSystemWithResponse request
	GetSystemWithResponse(ctx context.Context, systemSymbol string, reqEditors ...RequestEditorFn) (*GetSystemResponse, error)

	// GetSystemWaypointsWithResponse request
	GetSystemWaypointsWithResponse(ctx context.Context, systemSymbol string, params *GetSystemWaypointsParams, reqEditors ...RequestEditorFn) (*GetSystemWaypointsResponse, error)

	// GetWaypointWithResponse request
	GetWaypointWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetWaypointResponse, error)

	// GetConstructionWithResponse request
	GetConstructionWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetConstructionResponse, error)

	// SupplyConstructionWithBodyWithResponse request with any body
	SupplyConstructionWithBodyWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SupplyConstructionResponse, error)

	SupplyConstructionWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, body SupplyConstructionJSONRequestBody, reqEditors ...RequestEditorFn) (*SupplyConstructionResponse, error)

	// GetJumpGateWithResponse request
	GetJumpGateWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetJumpGateResponse, error)

	// GetMarketWithResponse request
	GetMarketWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetMarketResponse, error)

	// GetShipyardWithResponse request
	GetShipyardWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetShipyardResponse, error)
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Announcements []struct {
			Body  string `json:"body"`
			Title string `json:"title"`
		} `json:"announcements"`
		Description  string `json:"description"`
		Leaderboards struct {
			// MostCredits Top agents with the most credits.
			MostCredits []struct {
				// AgentSymbol Symbol of the agent.
				AgentSymbol string `json:"agentSymbol"`

				// Credits Amount of credits.
				Credits int64 `json:"credits"`
			} `json:"mostCredits"`

			// MostSubmittedCharts Top agents with the most charted submitted.
			MostSubmittedCharts []struct {
				// AgentSymbol Symbol of the agent.
				AgentSymbol string `json:"agentSymbol"`

				// ChartCount Amount of charts done by the agent.
				ChartCount int `json:"chartCount"`
			} `json:"mostSubmittedCharts"`
		} `json:"leaderboards"`
		Links []struct {
			Name string `json:"name"`
			Url  string `json:"url"`
		} `json:"links"`

		// ResetDate The date when the game server was last reset.
		ResetDate    string `json:"resetDate"`
		ServerResets struct {
			// Frequency How often we intend to reset the game server.
			Frequency string `json:"frequency"`

			// Next The date and time when the game server will reset.
			Next string `json:"next"`
		} `json:"serverResets"`
		Stats struct {
			// Agents Number of registered agents in the game.
			Agents int `json:"agents"`

			// Ships Total number of ships in the game.
			Ships int `json:"ships"`

			// Systems Total number of systems in the game.
			Systems int `json:"systems"`

			// Waypoints Total number of waypoints in the game.
			Waypoints int `json:"waypoints"`
		} `json:"stats"`

		// Status The current status of the game server.
		Status string `json:"status"`

		// Version The current version of the API.
		Version string `json:"version"`
	}
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []Agent `json:"data"`

		// Meta Meta details for pagination.
		Meta Meta `json:"meta"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Agent details.
		Data Agent `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []Faction `json:"data"`

		// Meta Meta details for pagination.
		Meta Meta `json:"meta"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Faction details.
		Data Faction `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Agent details.
		Data Agent `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMyAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []Contract `json:"data"`

		// Meta Meta details for pagination.
		Meta Meta `json:"meta"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContractsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Contract details.
		Data Contract `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcceptContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Agent Agent details.
			Agent Agent `json:"agent"`

			// Contract Contract details.
			Contract Contract `json:"contract"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r AcceptContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeliverContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Cargo Ship cargo details.
			Cargo ShipCargo `json:"cargo"`

			// Contract Contract details.
			Contract Contract `json:"contract"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r DeliverContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeliverContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FulfillContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Agent Agent details.
			Agent Agent `json:"agent"`

			// Contract Contract details.
			Contract Contract `json:"contract"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r FulfillContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FulfillContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyShipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []Ship `json:"data"`

		// Meta Meta details for pagination.
		Meta Meta `json:"meta"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMyShipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyShipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PurchaseShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Agent Agent details.
			Agent Agent `json:"agent"`

			// Ship Ship details.
			Ship Ship `json:"ship"`

			// Transaction Results of a transaction with a shipyard.
			Transaction ShipyardTransaction `json:"transaction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r PurchaseShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PurchaseShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Ship details.
		Data Ship `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMyShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyShipCargoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Ship cargo details.
		Data ShipCargo `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMyShipCargoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyShipCargoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Chart The chart of a system or waypoint, which makes the location visible to other agents.
			Chart Chart `json:"chart"`

			// Waypoint A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
			Waypoint Waypoint `json:"waypoint"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShipCooldownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data A cooldown is a period of time in which a ship cannot perform certain actions.
		Data Cooldown `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetShipCooldownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShipCooldownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DockShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Nav The navigation information of the ship.
			Nav ShipNav `json:"nav"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r DockShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DockShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtractResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cargo Ship cargo details.
			Cargo ShipCargo `json:"cargo"`

			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown `json:"cooldown"`

			// Extraction Extraction details.
			Extraction Extraction `json:"extraction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r ExtractResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtractResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtractResourcesWithSurveyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cargo Ship cargo details.
			Cargo ShipCargo `json:"cargo"`

			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown `json:"cooldown"`

			// Extraction Extraction details.
			Extraction Extraction `json:"extraction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r ExtractResourcesWithSurveyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtractResourcesWithSurveyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JettisonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Cargo Ship cargo details.
			Cargo ShipCargo `json:"cargo"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r JettisonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JettisonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JumpShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Agent Agent details.
			Agent Agent `json:"agent"`

			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown `json:"cooldown"`

			// Nav The navigation information of the ship.
			Nav ShipNav `json:"nav"`

			// Transaction Result of a transaction with a market.
			Transaction MarketTransaction `json:"transaction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r JumpShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JumpShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []ShipMount `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstallMountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Agent Agent details.
			Agent Agent `json:"agent"`

			// Cargo Ship cargo details.
			Cargo ShipCargo `json:"cargo"`

			// Mounts List of installed mounts after the installation of the new mount.
			Mounts []ShipMount `json:"mounts"`

			// Transaction Result of a transaction for a ship modification, such as installing a mount or a module.
			Transaction ShipModificationTransaction `json:"transaction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r InstallMountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstallMountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Agent Agent details.
			Agent Agent `json:"agent"`

			// Cargo Ship cargo details.
			Cargo ShipCargo `json:"cargo"`

			// Mounts List of installed mounts after the removal of the selected mount.
			Mounts []ShipMount `json:"mounts"`

			// Transaction Result of a transaction for a ship modification, such as installing a mount or a module.
			Transaction ShipModificationTransaction `json:"transaction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveMountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShipNavResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data The navigation information of the ship.
		Data ShipNav `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetShipNavResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShipNavResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchShipNavResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data The navigation information of the ship.
		Data ShipNav `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchShipNavResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchShipNavResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NavigateShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
			Fuel ShipFuel `json:"fuel"`

			// Nav The navigation information of the ship.
			Nav ShipNav `json:"nav"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r NavigateShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NavigateShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NegotiateContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Contract Contract details.
			Contract Contract `json:"contract"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r NegotiateContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NegotiateContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrbitShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Nav The navigation information of the ship.
			Nav ShipNav `json:"nav"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r OrbitShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrbitShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PurchaseCargoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Agent Agent details.
			Agent Agent `json:"agent"`

			// Cargo Ship cargo details.
			Cargo ShipCargo `json:"cargo"`

			// Transaction Result of a transaction with a market.
			Transaction MarketTransaction `json:"transaction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r PurchaseCargoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PurchaseCargoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShipRefineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cargo Ship cargo details.
			Cargo ShipCargo `json:"cargo"`

			// Consumed Goods that were consumed during this refining process.
			Consumed []struct {
				// TradeSymbol Symbol of the good.
				TradeSymbol string `json:"tradeSymbol"`

				// Units Amount of units of the good.
				Units int `json:"units"`
			} `json:"consumed"`

			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown `json:"cooldown"`

			// Produced Goods that were produced by this refining process.
			Produced []struct {
				// TradeSymbol Symbol of the good.
				TradeSymbol string `json:"tradeSymbol"`

				// Units Amount of units of the good.
				Units int `json:"units"`
			} `json:"produced"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r ShipRefineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShipRefineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefuelShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Agent Agent details.
			Agent Agent `json:"agent"`

			// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
			Fuel ShipFuel `json:"fuel"`

			// Transaction Result of a transaction with a market.
			Transaction MarketTransaction `json:"transaction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r RefuelShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefuelShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShipShipScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown `json:"cooldown"`

			// Ships List of scanned ships.
			Ships []ScannedShip `json:"ships"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateShipShipScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShipShipScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShipSystemScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown `json:"cooldown"`

			// Systems List of scanned systems.
			Systems []ScannedSystem `json:"systems"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateShipSystemScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShipSystemScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShipWaypointScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown `json:"cooldown"`

			// Waypoints List of scanned waypoints.
			Waypoints []ScannedWaypoint `json:"waypoints"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateShipWaypointScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShipWaypointScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SellCargoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Agent Agent details.
			Agent Agent `json:"agent"`

			// Cargo Ship cargo details.
			Cargo ShipCargo `json:"cargo"`

			// Transaction Result of a transaction with a market.
			Transaction MarketTransaction `json:"transaction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r SellCargoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SellCargoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SiphonResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cargo Ship cargo details.
			Cargo ShipCargo `json:"cargo"`

			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown `json:"cooldown"`

			// Siphon Siphon details.
			Siphon Siphon `json:"siphon"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r SiphonResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SiphonResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSurveyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown `json:"cooldown"`

			// Surveys Surveys created by this action.
			Surveys []Survey `json:"surveys"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateSurveyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSurveyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TransferCargoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Cargo Ship cargo details.
			Cargo ShipCargo `json:"cargo"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r TransferCargoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TransferCargoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WarpShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
			Fuel ShipFuel `json:"fuel"`

			// Nav The navigation information of the ship.
			Nav ShipNav `json:"nav"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r WarpShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WarpShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Agent Agent details.
			Agent Agent `json:"agent"`

			// Contract Contract details.
			Contract Contract `json:"contract"`

			// Faction Faction details.
			Faction Faction `json:"faction"`

			// Ship Ship details.
			Ship Ship `json:"ship"`

			// Token A Bearer token for accessing secured API endpoints.
			Token string `json:"token"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r RegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []System `json:"data"`

		// Meta Meta details for pagination.
		Meta Meta `json:"meta"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSystemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data System `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemWaypointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []Waypoint `json:"data"`

		// Meta Meta details for pagination.
		Meta Meta `json:"meta"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSystemWaypointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemWaypointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWaypointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
		Data Waypoint `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWaypointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWaypointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConstructionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data The construction details of a waypoint.
		Data Construction `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConstructionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConstructionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SupplyConstructionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cargo Ship cargo details.
			Cargo ShipCargo `json:"cargo"`

			// Construction The construction details of a waypoint.
			Construction Construction `json:"construction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r SupplyConstructionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SupplyConstructionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJumpGateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data JumpGate `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetJumpGateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJumpGateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Market `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMarketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShipyardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Shipyard `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetShipyardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShipyardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// GetAgentsWithResponse request returning *GetAgentsResponse
func (c *ClientWithResponses) GetAgentsWithResponse(ctx context.Context, params *GetAgentsParams, reqEditors ...RequestEditorFn) (*GetAgentsResponse, error) {
	rsp, err := c.GetAgents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentsResponse(rsp)
}

// GetAgentWithResponse request returning *GetAgentResponse
func (c *ClientWithResponses) GetAgentWithResponse(ctx context.Context, agentSymbol string, reqEditors ...RequestEditorFn) (*GetAgentResponse, error) {
	rsp, err := c.GetAgent(ctx, agentSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentResponse(rsp)
}

// GetFactionsWithResponse request returning *GetFactionsResponse
func (c *ClientWithResponses) GetFactionsWithResponse(ctx context.Context, params *GetFactionsParams, reqEditors ...RequestEditorFn) (*GetFactionsResponse, error) {
	rsp, err := c.GetFactions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFactionsResponse(rsp)
}

// GetFactionWithResponse request returning *GetFactionResponse
func (c *ClientWithResponses) GetFactionWithResponse(ctx context.Context, factionSymbol string, reqEditors ...RequestEditorFn) (*GetFactionResponse, error) {
	rsp, err := c.GetFaction(ctx, factionSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFactionResponse(rsp)
}

// GetMyAgentWithResponse request returning *GetMyAgentResponse
func (c *ClientWithResponses) GetMyAgentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyAgentResponse, error) {
	rsp, err := c.GetMyAgent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyAgentResponse(rsp)
}

// GetContractsWithResponse request returning *GetContractsResponse
func (c *ClientWithResponses) GetContractsWithResponse(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*GetContractsResponse, error) {
	rsp, err := c.GetContracts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractsResponse(rsp)
}

// GetContractWithResponse request returning *GetContractResponse
func (c *ClientWithResponses) GetContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*GetContractResponse, error) {
	rsp, err := c.GetContract(ctx, contractId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractResponse(rsp)
}

// AcceptContractWithResponse request returning *AcceptContractResponse
func (c *ClientWithResponses) AcceptContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*AcceptContractResponse, error) {
	rsp, err := c.AcceptContract(ctx, contractId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptContractResponse(rsp)
}

// DeliverContractWithBodyWithResponse request with arbitrary body returning *DeliverContractResponse
func (c *ClientWithResponses) DeliverContractWithBodyWithResponse(ctx context.Context, contractId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeliverContractResponse, error) {
	rsp, err := c.DeliverContractWithBody(ctx, contractId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeliverContractResponse(rsp)
}

func (c *ClientWithResponses) DeliverContractWithResponse(ctx context.Context, contractId string, body DeliverContractJSONRequestBody, reqEditors ...RequestEditorFn) (*DeliverContractResponse, error) {
	rsp, err := c.DeliverContract(ctx, contractId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeliverContractResponse(rsp)
}

// FulfillContractWithResponse request returning *FulfillContractResponse
func (c *ClientWithResponses) FulfillContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*FulfillContractResponse, error) {
	rsp, err := c.FulfillContract(ctx, contractId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFulfillContractResponse(rsp)
}

// GetMyShipsWithResponse request returning *GetMyShipsResponse
func (c *ClientWithResponses) GetMyShipsWithResponse(ctx context.Context, params *GetMyShipsParams, reqEditors ...RequestEditorFn) (*GetMyShipsResponse, error) {
	rsp, err := c.GetMyShips(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyShipsResponse(rsp)
}

// PurchaseShipWithBodyWithResponse request with arbitrary body returning *PurchaseShipResponse
func (c *ClientWithResponses) PurchaseShipWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PurchaseShipResponse, error) {
	rsp, err := c.PurchaseShipWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseShipResponse(rsp)
}

func (c *ClientWithResponses) PurchaseShipWithResponse(ctx context.Context, body PurchaseShipJSONRequestBody, reqEditors ...RequestEditorFn) (*PurchaseShipResponse, error) {
	rsp, err := c.PurchaseShip(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseShipResponse(rsp)
}

// GetMyShipWithResponse request returning *GetMyShipResponse
func (c *ClientWithResponses) GetMyShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetMyShipResponse, error) {
	rsp, err := c.GetMyShip(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyShipResponse(rsp)
}

// GetMyShipCargoWithResponse request returning *GetMyShipCargoResponse
func (c *ClientWithResponses) GetMyShipCargoWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetMyShipCargoResponse, error) {
	rsp, err := c.GetMyShipCargo(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyShipCargoResponse(rsp)
}

// CreateChartWithResponse request returning *CreateChartResponse
func (c *ClientWithResponses) CreateChartWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateChartResponse, error) {
	rsp, err := c.CreateChart(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChartResponse(rsp)
}

// GetShipCooldownWithResponse request returning *GetShipCooldownResponse
func (c *ClientWithResponses) GetShipCooldownWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetShipCooldownResponse, error) {
	rsp, err := c.GetShipCooldown(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShipCooldownResponse(rsp)
}

// DockShipWithResponse request returning *DockShipResponse
func (c *ClientWithResponses) DockShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*DockShipResponse, error) {
	rsp, err := c.DockShip(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDockShipResponse(rsp)
}

// ExtractResourcesWithBodyWithResponse request with arbitrary body returning *ExtractResourcesResponse
func (c *ClientWithResponses) ExtractResourcesWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtractResourcesResponse, error) {
	rsp, err := c.ExtractResourcesWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtractResourcesResponse(rsp)
}

func (c *ClientWithResponses) ExtractResourcesWithResponse(ctx context.Context, shipSymbol string, body ExtractResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtractResourcesResponse, error) {
	rsp, err := c.ExtractResources(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtractResourcesResponse(rsp)
}

// ExtractResourcesWithSurveyWithBodyWithResponse request with arbitrary body returning *ExtractResourcesWithSurveyResponse
func (c *ClientWithResponses) ExtractResourcesWithSurveyWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtractResourcesWithSurveyResponse, error) {
	rsp, err := c.ExtractResourcesWithSurveyWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtractResourcesWithSurveyResponse(rsp)
}

func (c *ClientWithResponses) ExtractResourcesWithSurveyWithResponse(ctx context.Context, shipSymbol string, body ExtractResourcesWithSurveyJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtractResourcesWithSurveyResponse, error) {
	rsp, err := c.ExtractResourcesWithSurvey(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtractResourcesWithSurveyResponse(rsp)
}

// JettisonWithBodyWithResponse request with arbitrary body returning *JettisonResponse
func (c *ClientWithResponses) JettisonWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JettisonResponse, error) {
	rsp, err := c.JettisonWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJettisonResponse(rsp)
}

func (c *ClientWithResponses) JettisonWithResponse(ctx context.Context, shipSymbol string, body JettisonJSONRequestBody, reqEditors ...RequestEditorFn) (*JettisonResponse, error) {
	rsp, err := c.Jettison(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJettisonResponse(rsp)
}

// JumpShipWithBodyWithResponse request with arbitrary body returning *JumpShipResponse
func (c *ClientWithResponses) JumpShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JumpShipResponse, error) {
	rsp, err := c.JumpShipWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJumpShipResponse(rsp)
}

func (c *ClientWithResponses) JumpShipWithResponse(ctx context.Context, shipSymbol string, body JumpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*JumpShipResponse, error) {
	rsp, err := c.JumpShip(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJumpShipResponse(rsp)
}

// GetMountsWithResponse request returning *GetMountsResponse
func (c *ClientWithResponses) GetMountsWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetMountsResponse, error) {
	rsp, err := c.GetMounts(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMountsResponse(rsp)
}

// InstallMountWithBodyWithResponse request with arbitrary body returning *InstallMountResponse
func (c *ClientWithResponses) InstallMountWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstallMountResponse, error) {
	rsp, err := c.InstallMountWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstallMountResponse(rsp)
}

func (c *ClientWithResponses) InstallMountWithResponse(ctx context.Context, shipSymbol string, body InstallMountJSONRequestBody, reqEditors ...RequestEditorFn) (*InstallMountResponse, error) {
	rsp, err := c.InstallMount(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstallMountResponse(rsp)
}

// RemoveMountWithBodyWithResponse request with arbitrary body returning *RemoveMountResponse
func (c *ClientWithResponses) RemoveMountWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveMountResponse, error) {
	rsp, err := c.RemoveMountWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMountResponse(rsp)
}

func (c *ClientWithResponses) RemoveMountWithResponse(ctx context.Context, shipSymbol string, body RemoveMountJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveMountResponse, error) {
	rsp, err := c.RemoveMount(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMountResponse(rsp)
}

// GetShipNavWithResponse request returning *GetShipNavResponse
func (c *ClientWithResponses) GetShipNavWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetShipNavResponse, error) {
	rsp, err := c.GetShipNav(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShipNavResponse(rsp)
}

// PatchShipNavWithBodyWithResponse request with arbitrary body returning *PatchShipNavResponse
func (c *ClientWithResponses) PatchShipNavWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchShipNavResponse, error) {
	rsp, err := c.PatchShipNavWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchShipNavResponse(rsp)
}

func (c *ClientWithResponses) PatchShipNavWithResponse(ctx context.Context, shipSymbol string, body PatchShipNavJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchShipNavResponse, error) {
	rsp, err := c.PatchShipNav(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchShipNavResponse(rsp)
}

// NavigateShipWithBodyWithResponse request with arbitrary body returning *NavigateShipResponse
func (c *ClientWithResponses) NavigateShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NavigateShipResponse, error) {
	rsp, err := c.NavigateShipWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNavigateShipResponse(rsp)
}

func (c *ClientWithResponses) NavigateShipWithResponse(ctx context.Context, shipSymbol string, body NavigateShipJSONRequestBody, reqEditors ...RequestEditorFn) (*NavigateShipResponse, error) {
	rsp, err := c.NavigateShip(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNavigateShipResponse(rsp)
}

// NegotiateContractWithResponse request returning *NegotiateContractResponse
func (c *ClientWithResponses) NegotiateContractWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*NegotiateContractResponse, error) {
	rsp, err := c.NegotiateContract(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNegotiateContractResponse(rsp)
}

// OrbitShipWithResponse request returning *OrbitShipResponse
func (c *ClientWithResponses) OrbitShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*OrbitShipResponse, error) {
	rsp, err := c.OrbitShip(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrbitShipResponse(rsp)
}

// PurchaseCargoWithBodyWithResponse request with arbitrary body returning *PurchaseCargoResponse
func (c *ClientWithResponses) PurchaseCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PurchaseCargoResponse, error) {
	rsp, err := c.PurchaseCargoWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseCargoResponse(rsp)
}

func (c *ClientWithResponses) PurchaseCargoWithResponse(ctx context.Context, shipSymbol string, body PurchaseCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*PurchaseCargoResponse, error) {
	rsp, err := c.PurchaseCargo(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseCargoResponse(rsp)
}

// ShipRefineWithBodyWithResponse request with arbitrary body returning *ShipRefineResponse
func (c *ClientWithResponses) ShipRefineWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShipRefineResponse, error) {
	rsp, err := c.ShipRefineWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShipRefineResponse(rsp)
}

func (c *ClientWithResponses) ShipRefineWithResponse(ctx context.Context, shipSymbol string, body ShipRefineJSONRequestBody, reqEditors ...RequestEditorFn) (*ShipRefineResponse, error) {
	rsp, err := c.ShipRefine(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShipRefineResponse(rsp)
}

// RefuelShipWithBodyWithResponse request with arbitrary body returning *RefuelShipResponse
func (c *ClientWithResponses) RefuelShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RefuelShipResponse, error) {
	rsp, err := c.RefuelShipWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefuelShipResponse(rsp)
}

func (c *ClientWithResponses) RefuelShipWithResponse(ctx context.Context, shipSymbol string, body RefuelShipJSONRequestBody, reqEditors ...RequestEditorFn) (*RefuelShipResponse, error) {
	rsp, err := c.RefuelShip(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefuelShipResponse(rsp)
}

// CreateShipShipScanWithResponse request returning *CreateShipShipScanResponse
func (c *ClientWithResponses) CreateShipShipScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipShipScanResponse, error) {
	rsp, err := c.CreateShipShipScan(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShipShipScanResponse(rsp)
}

// CreateShipSystemScanWithResponse request returning *CreateShipSystemScanResponse
func (c *ClientWithResponses) CreateShipSystemScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipSystemScanResponse, error) {
	rsp, err := c.CreateShipSystemScan(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShipSystemScanResponse(rsp)
}

// CreateShipWaypointScanWithResponse request returning *CreateShipWaypointScanResponse
func (c *ClientWithResponses) CreateShipWaypointScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipWaypointScanResponse, error) {
	rsp, err := c.CreateShipWaypointScan(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShipWaypointScanResponse(rsp)
}

// SellCargoWithBodyWithResponse request with arbitrary body returning *SellCargoResponse
func (c *ClientWithResponses) SellCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SellCargoResponse, error) {
	rsp, err := c.SellCargoWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSellCargoResponse(rsp)
}

func (c *ClientWithResponses) SellCargoWithResponse(ctx context.Context, shipSymbol string, body SellCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*SellCargoResponse, error) {
	rsp, err := c.SellCargo(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSellCargoResponse(rsp)
}

// SiphonResourcesWithResponse request returning *SiphonResourcesResponse
func (c *ClientWithResponses) SiphonResourcesWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*SiphonResourcesResponse, error) {
	rsp, err := c.SiphonResources(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSiphonResourcesResponse(rsp)
}

// CreateSurveyWithResponse request returning *CreateSurveyResponse
func (c *ClientWithResponses) CreateSurveyWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateSurveyResponse, error) {
	rsp, err := c.CreateSurvey(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSurveyResponse(rsp)
}

// TransferCargoWithBodyWithResponse request with arbitrary body returning *TransferCargoResponse
func (c *ClientWithResponses) TransferCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferCargoResponse, error) {
	rsp, err := c.TransferCargoWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransferCargoResponse(rsp)
}

func (c *ClientWithResponses) TransferCargoWithResponse(ctx context.Context, shipSymbol string, body TransferCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*TransferCargoResponse, error) {
	rsp, err := c.TransferCargo(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransferCargoResponse(rsp)
}

// WarpShipWithBodyWithResponse request with arbitrary body returning *WarpShipResponse
func (c *ClientWithResponses) WarpShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WarpShipResponse, error) {
	rsp, err := c.WarpShipWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWarpShipResponse(rsp)
}

func (c *ClientWithResponses) WarpShipWithResponse(ctx context.Context, shipSymbol string, body WarpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*WarpShipResponse, error) {
	rsp, err := c.WarpShip(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWarpShipResponse(rsp)
}

// RegisterWithBodyWithResponse request with arbitrary body returning *RegisterResponse
func (c *ClientWithResponses) RegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterResponse, error) {
	rsp, err := c.RegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterResponse(rsp)
}

func (c *ClientWithResponses) RegisterWithResponse(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterResponse, error) {
	rsp, err := c.Register(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterResponse(rsp)
}

// GetSystemsWithResponse request returning *GetSystemsResponse
func (c *ClientWithResponses) GetSystemsWithResponse(ctx context.Context, params *GetSystemsParams, reqEditors ...RequestEditorFn) (*GetSystemsResponse, error) {
	rsp, err := c.GetSystems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemsResponse(rsp)
}

// GetSystemWithResponse request returning *GetSystemResponse
func (c *ClientWithResponses) GetSystemWithResponse(ctx context.Context, systemSymbol string, reqEditors ...RequestEditorFn) (*GetSystemResponse, error) {
	rsp, err := c.GetSystem(ctx, systemSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemResponse(rsp)
}

// GetSystemWaypointsWithResponse request returning *GetSystemWaypointsResponse
func (c *ClientWithResponses) GetSystemWaypointsWithResponse(ctx context.Context, systemSymbol string, params *GetSystemWaypointsParams, reqEditors ...RequestEditorFn) (*GetSystemWaypointsResponse, error) {
	rsp, err := c.GetSystemWaypoints(ctx, systemSymbol, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemWaypointsResponse(rsp)
}

// GetWaypointWithResponse request returning *GetWaypointResponse
func (c *ClientWithResponses) GetWaypointWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetWaypointResponse, error) {
	rsp, err := c.GetWaypoint(ctx, systemSymbol, waypointSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWaypointResponse(rsp)
}

// GetConstructionWithResponse request returning *GetConstructionResponse
func (c *ClientWithResponses) GetConstructionWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetConstructionResponse, error) {
	rsp, err := c.GetConstruction(ctx, systemSymbol, waypointSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConstructionResponse(rsp)
}

// SupplyConstructionWithBodyWithResponse request with arbitrary body returning *SupplyConstructionResponse
func (c *ClientWithResponses) SupplyConstructionWithBodyWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SupplyConstructionResponse, error) {
	rsp, err := c.SupplyConstructionWithBody(ctx, systemSymbol, waypointSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSupplyConstructionResponse(rsp)
}

func (c *ClientWithResponses) SupplyConstructionWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, body SupplyConstructionJSONRequestBody, reqEditors ...RequestEditorFn) (*SupplyConstructionResponse, error) {
	rsp, err := c.SupplyConstruction(ctx, systemSymbol, waypointSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSupplyConstructionResponse(rsp)
}

// GetJumpGateWithResponse request returning *GetJumpGateResponse
func (c *ClientWithResponses) GetJumpGateWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetJumpGateResponse, error) {
	rsp, err := c.GetJumpGate(ctx, systemSymbol, waypointSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJumpGateResponse(rsp)
}

// GetMarketWithResponse request returning *GetMarketResponse
func (c *ClientWithResponses) GetMarketWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetMarketResponse, error) {
	rsp, err := c.GetMarket(ctx, systemSymbol, waypointSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketResponse(rsp)
}

// GetShipyardWithResponse request returning *GetShipyardResponse
func (c *ClientWithResponses) GetShipyardWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetShipyardResponse, error) {
	rsp, err := c.GetShipyard(ctx, systemSymbol, waypointSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShipyardResponse(rsp)
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Announcements []struct {
				Body  string `json:"body"`
				Title string `json:"title"`
			} `json:"announcements"`
			Description  string `json:"description"`
			Leaderboards struct {
				// MostCredits Top agents with the most credits.
				MostCredits []struct {
					// AgentSymbol Symbol of the agent.
					AgentSymbol string `json:"agentSymbol"`

					// Credits Amount of credits.
					Credits int64 `json:"credits"`
				} `json:"mostCredits"`

				// MostSubmittedCharts Top agents with the most charted submitted.
				MostSubmittedCharts []struct {
					// AgentSymbol Symbol of the agent.
					AgentSymbol string `json:"agentSymbol"`

					// ChartCount Amount of charts done by the agent.
					ChartCount int `json:"chartCount"`
				} `json:"mostSubmittedCharts"`
			} `json:"leaderboards"`
			Links []struct {
				Name string `json:"name"`
				Url  string `json:"url"`
			} `json:"links"`

			// ResetDate The date when the game server was last reset.
			ResetDate    string `json:"resetDate"`
			ServerResets struct {
				// Frequency How often we intend to reset the game server.
				Frequency string `json:"frequency"`

				// Next The date and time when the game server will reset.
				Next string `json:"next"`
			} `json:"serverResets"`
			Stats struct {
				// Agents Number of registered agents in the game.
				Agents int `json:"agents"`

				// Ships Total number of ships in the game.
				Ships int `json:"ships"`

				// Systems Total number of systems in the game.
				Systems int `json:"systems"`

				// Waypoints Total number of waypoints in the game.
				Waypoints int `json:"waypoints"`
			} `json:"stats"`

			// Status The current status of the game server.
			Status string `json:"status"`

			// Version The current version of the API.
			Version string `json:"version"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentsResponse parses an HTTP response from a GetAgentsWithResponse call
func ParseGetAgentsResponse(rsp *http.Response) (*GetAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []Agent `json:"data"`

			// Meta Meta details for pagination.
			Meta Meta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentResponse parses an HTTP response from a GetAgentWithResponse call
func ParseGetAgentResponse(rsp *http.Response) (*GetAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Agent details.
			Data Agent `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFactionsResponse parses an HTTP response from a GetFactionsWithResponse call
func ParseGetFactionsResponse(rsp *http.Response) (*GetFactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []Faction `json:"data"`

			// Meta Meta details for pagination.
			Meta Meta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFactionResponse parses an HTTP response from a GetFactionWithResponse call
func ParseGetFactionResponse(rsp *http.Response) (*GetFactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Faction details.
			Data Faction `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyAgentResponse parses an HTTP response from a GetMyAgentWithResponse call
func ParseGetMyAgentResponse(rsp *http.Response) (*GetMyAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Agent details.
			Data Agent `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContractsResponse parses an HTTP response from a GetContractsWithResponse call
func ParseGetContractsResponse(rsp *http.Response) (*GetContractsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []Contract `json:"data"`

			// Meta Meta details for pagination.
			Meta Meta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContractResponse parses an HTTP response from a GetContractWithResponse call
func ParseGetContractResponse(rsp *http.Response) (*GetContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Contract details.
			Data Contract `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAcceptContractResponse parses an HTTP response from a AcceptContractWithResponse call
func ParseAcceptContractResponse(rsp *http.Response) (*AcceptContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcceptContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Agent Agent details.
				Agent Agent `json:"agent"`

				// Contract Contract details.
				Contract Contract `json:"contract"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeliverContractResponse parses an HTTP response from a DeliverContractWithResponse call
func ParseDeliverContractResponse(rsp *http.Response) (*DeliverContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeliverContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Cargo Ship cargo details.
				Cargo ShipCargo `json:"cargo"`

				// Contract Contract details.
				Contract Contract `json:"contract"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFulfillContractResponse parses an HTTP response from a FulfillContractWithResponse call
func ParseFulfillContractResponse(rsp *http.Response) (*FulfillContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FulfillContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Agent Agent details.
				Agent Agent `json:"agent"`

				// Contract Contract details.
				Contract Contract `json:"contract"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyShipsResponse parses an HTTP response from a GetMyShipsWithResponse call
func ParseGetMyShipsResponse(rsp *http.Response) (*GetMyShipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyShipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []Ship `json:"data"`

			// Meta Meta details for pagination.
			Meta Meta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePurchaseShipResponse parses an HTTP response from a PurchaseShipWithResponse call
func ParsePurchaseShipResponse(rsp *http.Response) (*PurchaseShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PurchaseShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Agent Agent details.
				Agent Agent `json:"agent"`

				// Ship Ship details.
				Ship Ship `json:"ship"`

				// Transaction Results of a transaction with a shipyard.
				Transaction ShipyardTransaction `json:"transaction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMyShipResponse parses an HTTP response from a GetMyShipWithResponse call
func ParseGetMyShipResponse(rsp *http.Response) (*GetMyShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Ship details.
			Data Ship `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyShipCargoResponse parses an HTTP response from a GetMyShipCargoWithResponse call
func ParseGetMyShipCargoResponse(rsp *http.Response) (*GetMyShipCargoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyShipCargoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Ship cargo details.
			Data ShipCargo `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateChartResponse parses an HTTP response from a CreateChartWithResponse call
func ParseCreateChartResponse(rsp *http.Response) (*CreateChartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Chart The chart of a system or waypoint, which makes the location visible to other agents.
				Chart Chart `json:"chart"`

				// Waypoint A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
				Waypoint Waypoint `json:"waypoint"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetShipCooldownResponse parses an HTTP response from a GetShipCooldownWithResponse call
func ParseGetShipCooldownResponse(rsp *http.Response) (*GetShipCooldownResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShipCooldownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data A cooldown is a period of time in which a ship cannot perform certain actions.
			Data Cooldown `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDockShipResponse parses an HTTP response from a DockShipWithResponse call
func ParseDockShipResponse(rsp *http.Response) (*DockShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DockShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Nav The navigation information of the ship.
				Nav ShipNav `json:"nav"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExtractResourcesResponse parses an HTTP response from a ExtractResourcesWithResponse call
func ParseExtractResourcesResponse(rsp *http.Response) (*ExtractResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtractResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cargo Ship cargo details.
				Cargo ShipCargo `json:"cargo"`

				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown `json:"cooldown"`

				// Extraction Extraction details.
				Extraction Extraction `json:"extraction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseExtractResourcesWithSurveyResponse parses an HTTP response from a ExtractResourcesWithSurveyWithResponse call
func ParseExtractResourcesWithSurveyResponse(rsp *http.Response) (*ExtractResourcesWithSurveyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtractResourcesWithSurveyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cargo Ship cargo details.
				Cargo ShipCargo `json:"cargo"`

				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown `json:"cooldown"`

				// Extraction Extraction details.
				Extraction Extraction `json:"extraction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseJettisonResponse parses an HTTP response from a JettisonWithResponse call
func ParseJettisonResponse(rsp *http.Response) (*JettisonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JettisonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Cargo Ship cargo details.
				Cargo ShipCargo `json:"cargo"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJumpShipResponse parses an HTTP response from a JumpShipWithResponse call
func ParseJumpShipResponse(rsp *http.Response) (*JumpShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JumpShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Agent Agent details.
				Agent Agent `json:"agent"`

				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown `json:"cooldown"`

				// Nav The navigation information of the ship.
				Nav ShipNav `json:"nav"`

				// Transaction Result of a transaction with a market.
				Transaction MarketTransaction `json:"transaction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMountsResponse parses an HTTP response from a GetMountsWithResponse call
func ParseGetMountsResponse(rsp *http.Response) (*GetMountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []ShipMount `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInstallMountResponse parses an HTTP response from a InstallMountWithResponse call
func ParseInstallMountResponse(rsp *http.Response) (*InstallMountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstallMountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Agent Agent details.
				Agent Agent `json:"agent"`

				// Cargo Ship cargo details.
				Cargo ShipCargo `json:"cargo"`

				// Mounts List of installed mounts after the installation of the new mount.
				Mounts []ShipMount `json:"mounts"`

				// Transaction Result of a transaction for a ship modification, such as installing a mount or a module.
				Transaction ShipModificationTransaction `json:"transaction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRemoveMountResponse parses an HTTP response from a RemoveMountWithResponse call
func ParseRemoveMountResponse(rsp *http.Response) (*RemoveMountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveMountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Agent Agent details.
				Agent Agent `json:"agent"`

				// Cargo Ship cargo details.
				Cargo ShipCargo `json:"cargo"`

				// Mounts List of installed mounts after the removal of the selected mount.
				Mounts []ShipMount `json:"mounts"`

				// Transaction Result of a transaction for a ship modification, such as installing a mount or a module.
				Transaction ShipModificationTransaction `json:"transaction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetShipNavResponse parses an HTTP response from a GetShipNavWithResponse call
func ParseGetShipNavResponse(rsp *http.Response) (*GetShipNavResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShipNavResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data The navigation information of the ship.
			Data ShipNav `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchShipNavResponse parses an HTTP response from a PatchShipNavWithResponse call
func ParsePatchShipNavResponse(rsp *http.Response) (*PatchShipNavResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchShipNavResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data The navigation information of the ship.
			Data ShipNav `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNavigateShipResponse parses an HTTP response from a NavigateShipWithResponse call
func ParseNavigateShipResponse(rsp *http.Response) (*NavigateShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NavigateShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
				Fuel ShipFuel `json:"fuel"`

				// Nav The navigation information of the ship.
				Nav ShipNav `json:"nav"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNegotiateContractResponse parses an HTTP response from a NegotiateContractWithResponse call
func ParseNegotiateContractResponse(rsp *http.Response) (*NegotiateContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NegotiateContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Contract Contract details.
				Contract Contract `json:"contract"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOrbitShipResponse parses an HTTP response from a OrbitShipWithResponse call
func ParseOrbitShipResponse(rsp *http.Response) (*OrbitShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrbitShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Nav The navigation information of the ship.
				Nav ShipNav `json:"nav"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePurchaseCargoResponse parses an HTTP response from a PurchaseCargoWithResponse call
func ParsePurchaseCargoResponse(rsp *http.Response) (*PurchaseCargoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PurchaseCargoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Agent Agent details.
				Agent Agent `json:"agent"`

				// Cargo Ship cargo details.
				Cargo ShipCargo `json:"cargo"`

				// Transaction Result of a transaction with a market.
				Transaction MarketTransaction `json:"transaction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseShipRefineResponse parses an HTTP response from a ShipRefineWithResponse call
func ParseShipRefineResponse(rsp *http.Response) (*ShipRefineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShipRefineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cargo Ship cargo details.
				Cargo ShipCargo `json:"cargo"`

				// Consumed Goods that were consumed during this refining process.
				Consumed []struct {
					// TradeSymbol Symbol of the good.
					TradeSymbol string `json:"tradeSymbol"`

					// Units Amount of units of the good.
					Units int `json:"units"`
				} `json:"consumed"`

				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown `json:"cooldown"`

				// Produced Goods that were produced by this refining process.
				Produced []struct {
					// TradeSymbol Symbol of the good.
					TradeSymbol string `json:"tradeSymbol"`

					// Units Amount of units of the good.
					Units int `json:"units"`
				} `json:"produced"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRefuelShipResponse parses an HTTP response from a RefuelShipWithResponse call
func ParseRefuelShipResponse(rsp *http.Response) (*RefuelShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefuelShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Agent Agent details.
				Agent Agent `json:"agent"`

				// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
				Fuel ShipFuel `json:"fuel"`

				// Transaction Result of a transaction with a market.
				Transaction MarketTransaction `json:"transaction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateShipShipScanResponse parses an HTTP response from a CreateShipShipScanWithResponse call
func ParseCreateShipShipScanResponse(rsp *http.Response) (*CreateShipShipScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShipShipScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown `json:"cooldown"`

				// Ships List of scanned ships.
				Ships []ScannedShip `json:"ships"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateShipSystemScanResponse parses an HTTP response from a CreateShipSystemScanWithResponse call
func ParseCreateShipSystemScanResponse(rsp *http.Response) (*CreateShipSystemScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShipSystemScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown `json:"cooldown"`

				// Systems List of scanned systems.
				Systems []ScannedSystem `json:"systems"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateShipWaypointScanResponse parses an HTTP response from a CreateShipWaypointScanWithResponse call
func ParseCreateShipWaypointScanResponse(rsp *http.Response) (*CreateShipWaypointScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShipWaypointScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown `json:"cooldown"`

				// Waypoints List of scanned waypoints.
				Waypoints []ScannedWaypoint `json:"waypoints"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSellCargoResponse parses an HTTP response from a SellCargoWithResponse call
func ParseSellCargoResponse(rsp *http.Response) (*SellCargoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SellCargoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Agent Agent details.
				Agent Agent `json:"agent"`

				// Cargo Ship cargo details.
				Cargo ShipCargo `json:"cargo"`

				// Transaction Result of a transaction with a market.
				Transaction MarketTransaction `json:"transaction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSiphonResourcesResponse parses an HTTP response from a SiphonResourcesWithResponse call
func ParseSiphonResourcesResponse(rsp *http.Response) (*SiphonResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SiphonResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cargo Ship cargo details.
				Cargo ShipCargo `json:"cargo"`

				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown `json:"cooldown"`

				// Siphon Siphon details.
				Siphon Siphon `json:"siphon"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateSurveyResponse parses an HTTP response from a CreateSurveyWithResponse call
func ParseCreateSurveyResponse(rsp *http.Response) (*CreateSurveyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSurveyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown `json:"cooldown"`

				// Surveys Surveys created by this action.
				Surveys []Survey `json:"surveys"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTransferCargoResponse parses an HTTP response from a TransferCargoWithResponse call
func ParseTransferCargoResponse(rsp *http.Response) (*TransferCargoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TransferCargoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Cargo Ship cargo details.
				Cargo ShipCargo `json:"cargo"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWarpShipResponse parses an HTTP response from a WarpShipWithResponse call
func ParseWarpShipResponse(rsp *http.Response) (*WarpShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WarpShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
				Fuel ShipFuel `json:"fuel"`

				// Nav The navigation information of the ship.
				Nav ShipNav `json:"nav"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegisterResponse parses an HTTP response from a RegisterWithResponse call
func ParseRegisterResponse(rsp *http.Response) (*RegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Agent Agent details.
				Agent Agent `json:"agent"`

				// Contract Contract details.
				Contract Contract `json:"contract"`

				// Faction Faction details.
				Faction Faction `json:"faction"`

				// Ship Ship details.
				Ship Ship `json:"ship"`

				// Token A Bearer token for accessing secured API endpoints.
				Token string `json:"token"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetSystemsResponse parses an HTTP response from a GetSystemsWithResponse call
func ParseGetSystemsResponse(rsp *http.Response) (*GetSystemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []System `json:"data"`

			// Meta Meta details for pagination.
			Meta Meta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSystemResponse parses an HTTP response from a GetSystemWithResponse call
func ParseGetSystemResponse(rsp *http.Response) (*GetSystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data System `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSystemWaypointsResponse parses an HTTP response from a GetSystemWaypointsWithResponse call
func ParseGetSystemWaypointsResponse(rsp *http.Response) (*GetSystemWaypointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemWaypointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []Waypoint `json:"data"`

			// Meta Meta details for pagination.
			Meta Meta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWaypointResponse parses an HTTP response from a GetWaypointWithResponse call
func ParseGetWaypointResponse(rsp *http.Response) (*GetWaypointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWaypointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
			Data Waypoint `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConstructionResponse parses an HTTP response from a GetConstructionWithResponse call
func ParseGetConstructionResponse(rsp *http.Response) (*GetConstructionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConstructionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data The construction details of a waypoint.
			Data Construction `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSupplyConstructionResponse parses an HTTP response from a SupplyConstructionWithResponse call
func ParseSupplyConstructionResponse(rsp *http.Response) (*SupplyConstructionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SupplyConstructionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cargo Ship cargo details.
				Cargo ShipCargo `json:"cargo"`

				// Construction The construction details of a waypoint.
				Construction Construction `json:"construction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetJumpGateResponse parses an HTTP response from a GetJumpGateWithResponse call
func ParseGetJumpGateResponse(rsp *http.Response) (*GetJumpGateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJumpGateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data JumpGate `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMarketResponse parses an HTTP response from a GetMarketWithResponse call
func ParseGetMarketResponse(rsp *http.Response) (*GetMarketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Market `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShipyardResponse parses an HTTP response from a GetShipyardWithResponse call
func ParseGetShipyardResponse(rsp *http.Response) (*GetShipyardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShipyardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Shipyard `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
